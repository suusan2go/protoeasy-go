// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/devtools/cloudtrace/v1/trace.proto

package google_devtools_cloudtrace_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/go/google/api"
import _ "github.com/golang/protobuf/ptypes/empty"
import google_protobuf2 "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Type of span. Can be used to specify additional relationships between spans
// in addition to a parent/child relationship.
type TraceSpan_SpanKind int32

const (
	// Unspecified.
	TraceSpan_SPAN_KIND_UNSPECIFIED TraceSpan_SpanKind = 0
	// Indicates that the span covers server-side handling of an RPC or other
	// remote network request.
	TraceSpan_RPC_SERVER TraceSpan_SpanKind = 1
	// Indicates that the span covers the client-side wrapper around an RPC or
	// other remote request.
	TraceSpan_RPC_CLIENT TraceSpan_SpanKind = 2
)

var TraceSpan_SpanKind_name = map[int32]string{
	0: "SPAN_KIND_UNSPECIFIED",
	1: "RPC_SERVER",
	2: "RPC_CLIENT",
}
var TraceSpan_SpanKind_value = map[string]int32{
	"SPAN_KIND_UNSPECIFIED": 0,
	"RPC_SERVER":            1,
	"RPC_CLIENT":            2,
}

func (x TraceSpan_SpanKind) String() string {
	return proto.EnumName(TraceSpan_SpanKind_name, int32(x))
}
func (TraceSpan_SpanKind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

// Type of data returned for traces in the list.
type ListTracesRequest_ViewType int32

const (
	// Default is `MINIMAL` if unspecified.
	ListTracesRequest_VIEW_TYPE_UNSPECIFIED ListTracesRequest_ViewType = 0
	// Minimal view of the trace record that contains only the project
	// and trace IDs.
	ListTracesRequest_MINIMAL ListTracesRequest_ViewType = 1
	// Root span view of the trace record that returns the root spans along
	// with the minimal trace data.
	ListTracesRequest_ROOTSPAN ListTracesRequest_ViewType = 2
	// Complete view of the trace record that contains the actual trace data.
	// This is equivalent to calling the REST `get` or RPC `GetTrace` method
	// using the ID of each listed trace.
	ListTracesRequest_COMPLETE ListTracesRequest_ViewType = 3
)

var ListTracesRequest_ViewType_name = map[int32]string{
	0: "VIEW_TYPE_UNSPECIFIED",
	1: "MINIMAL",
	2: "ROOTSPAN",
	3: "COMPLETE",
}
var ListTracesRequest_ViewType_value = map[string]int32{
	"VIEW_TYPE_UNSPECIFIED": 0,
	"MINIMAL":               1,
	"ROOTSPAN":              2,
	"COMPLETE":              3,
}

func (x ListTracesRequest_ViewType) String() string {
	return proto.EnumName(ListTracesRequest_ViewType_name, int32(x))
}
func (ListTracesRequest_ViewType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0}
}

// A trace describes how long it takes for an application to perform an
// operation. It consists of a set of spans, each of which represent a single
// timed event within the operation.
type Trace struct {
	// Project ID of the Cloud project where the trace data is stored.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// Globally unique identifier for the trace. This identifier is a 128-bit
	// numeric value formatted as a 32-byte hex string.
	TraceId string `protobuf:"bytes,2,opt,name=trace_id,json=traceId" json:"trace_id,omitempty"`
	// Collection of spans in the trace.
	Spans []*TraceSpan `protobuf:"bytes,3,rep,name=spans" json:"spans,omitempty"`
}

func (m *Trace) Reset()                    { *m = Trace{} }
func (m *Trace) String() string            { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()               {}
func (*Trace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Trace) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *Trace) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (m *Trace) GetSpans() []*TraceSpan {
	if m != nil {
		return m.Spans
	}
	return nil
}

// List of new or updated traces.
type Traces struct {
	// List of traces.
	Traces []*Trace `protobuf:"bytes,1,rep,name=traces" json:"traces,omitempty"`
}

func (m *Traces) Reset()                    { *m = Traces{} }
func (m *Traces) String() string            { return proto.CompactTextString(m) }
func (*Traces) ProtoMessage()               {}
func (*Traces) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Traces) GetTraces() []*Trace {
	if m != nil {
		return m.Traces
	}
	return nil
}

// A span represents a single timed event within a trace. Spans can be nested
// and form a trace tree. Often, a trace contains a root span that describes the
// end-to-end latency of an operation and, optionally, one or more subspans for
// its suboperations. Spans do not need to be contiguous. There may be gaps
// between spans in a trace.
type TraceSpan struct {
	// Identifier for the span. Must be a 64-bit integer other than 0 and
	// unique within a trace.
	SpanId uint64 `protobuf:"fixed64,1,opt,name=span_id,json=spanId" json:"span_id,omitempty"`
	// Distinguishes between spans generated in a particular context. For example,
	// two spans with the same name may be distinguished using `RPC_CLIENT`
	// and `RPC_SERVER` to identify queueing latency associated with the span.
	Kind TraceSpan_SpanKind `protobuf:"varint,2,opt,name=kind,enum=google.devtools.cloudtrace.v1.TraceSpan_SpanKind" json:"kind,omitempty"`
	// Name of the span. Must be less than 128 bytes. The span name is sanitized
	// and displayed in the Stackdriver Trace tool in the
	// {% dynamic print site_values.console_name %}.
	// The name may be a method name or some other per-call site name.
	// For the same executable and the same call point, a best practice is
	// to use a consistent name, which makes it easier to correlate
	// cross-trace spans.
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// Start time of the span in nanoseconds from the UNIX epoch.
	StartTime *google_protobuf2.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// End time of the span in nanoseconds from the UNIX epoch.
	EndTime *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	// ID of the parent span, if any. Optional.
	ParentSpanId uint64 `protobuf:"fixed64,6,opt,name=parent_span_id,json=parentSpanId" json:"parent_span_id,omitempty"`
	// Collection of labels associated with the span. Label keys must be less than
	// 128 bytes. Label values must be less than 16 kilobytes (10MB for
	// `/stacktrace` values).
	//
	// Some predefined label keys exist, or you may create your own. When creating
	// your own, we recommend the following formats:
	//
	// * `/category/product/key` for agents of well-known products (e.g.
	//   `/db/mongodb/read_size`).
	// * `short_host/path/key` for domain-specific keys (e.g.
	//   `foo.com/myproduct/bar`)
	//
	// Predefined labels include:
	//
	// *   `/agent`
	// *   `/component`
	// *   `/error/message`
	// *   `/error/name`
	// *   `/http/client_city`
	// *   `/http/client_country`
	// *   `/http/client_protocol`
	// *   `/http/client_region`
	// *   `/http/host`
	// *   `/http/method`
	// *   `/http/redirected_url`
	// *   `/http/request/size`
	// *   `/http/response/size`
	// *   `/http/status_code`
	// *   `/http/url`
	// *   `/http/user_agent`
	// *   `/pid`
	// *   `/stacktrace`
	// *   `/tid`
	Labels map[string]string `protobuf:"bytes,7,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TraceSpan) Reset()                    { *m = TraceSpan{} }
func (m *TraceSpan) String() string            { return proto.CompactTextString(m) }
func (*TraceSpan) ProtoMessage()               {}
func (*TraceSpan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TraceSpan) GetSpanId() uint64 {
	if m != nil {
		return m.SpanId
	}
	return 0
}

func (m *TraceSpan) GetKind() TraceSpan_SpanKind {
	if m != nil {
		return m.Kind
	}
	return TraceSpan_SPAN_KIND_UNSPECIFIED
}

func (m *TraceSpan) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TraceSpan) GetStartTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *TraceSpan) GetEndTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *TraceSpan) GetParentSpanId() uint64 {
	if m != nil {
		return m.ParentSpanId
	}
	return 0
}

func (m *TraceSpan) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// The request message for the `ListTraces` method. All fields are required
// unless specified.
type ListTracesRequest struct {
	// ID of the Cloud project where the trace data is stored.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// Type of data returned for traces in the list. Optional. Default is
	// `MINIMAL`.
	View ListTracesRequest_ViewType `protobuf:"varint,2,opt,name=view,enum=google.devtools.cloudtrace.v1.ListTracesRequest_ViewType" json:"view,omitempty"`
	// Maximum number of traces to return. If not specified or <= 0, the
	// implementation selects a reasonable value.  The implementation may
	// return fewer traces than the requested page size. Optional.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// Token identifying the page of results to return. If provided, use the
	// value of the `next_page_token` field from a previous request. Optional.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	// Start of the time interval (inclusive) during which the trace data was
	// collected from the application.
	StartTime *google_protobuf2.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// End of the time interval (inclusive) during which the trace data was
	// collected from the application.
	EndTime *google_protobuf2.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	// An optional filter against labels for the request.
	//
	// By default, searches use prefix matching. To specify exact match, prepend
	// a plus symbol (`+`) to the search term.
	// Multiple terms are ANDed. Syntax:
	//
	// *   `root:NAME_PREFIX` or `NAME_PREFIX`: Return traces where any root
	//     span starts with `NAME_PREFIX`.
	// *   `+root:NAME` or `+NAME`: Return traces where any root span's name is
	//     exactly `NAME`.
	// *   `span:NAME_PREFIX`: Return traces where any span starts with
	//     `NAME_PREFIX`.
	// *   `+span:NAME`: Return traces where any span's name is exactly
	//     `NAME`.
	// *   `latency:DURATION`: Return traces whose overall latency is
	//     greater or equal to than `DURATION`. Accepted units are nanoseconds
	//     (`ns`), milliseconds (`ms`), and seconds (`s`). Default is `ms`. For
	//     example, `latency:24ms` returns traces whose overall latency
	//     is greater than or equal to 24 milliseconds.
	// *   `label:LABEL_KEY`: Return all traces containing the specified
	//     label key (exact match, case-sensitive) regardless of the key:value
	//     pair's value (including empty values).
	// *   `LABEL_KEY:VALUE_PREFIX`: Return all traces containing the specified
	//     label key (exact match, case-sensitive) whose value starts with
	//     `VALUE_PREFIX`. Both a key and a value must be specified.
	// *   `+LABEL_KEY:VALUE`: Return all traces containing a key:value pair
	//     exactly matching the specified text. Both a key and a value must be
	//     specified.
	// *   `method:VALUE`: Equivalent to `/http/method:VALUE`.
	// *   `url:VALUE`: Equivalent to `/http/url:VALUE`.
	Filter string `protobuf:"bytes,7,opt,name=filter" json:"filter,omitempty"`
	// Field used to sort the returned traces. Optional.
	// Can be one of the following:
	//
	// *   `trace_id`
	// *   `name` (`name` field of root span in the trace)
	// *   `duration` (difference between `end_time` and `start_time` fields of
	//      the root span)
	// *   `start` (`start_time` field of the root span)
	//
	// Descending order can be specified by appending `desc` to the sort field
	// (for example, `name desc`).
	//
	// Only one sort field is permitted.
	OrderBy string `protobuf:"bytes,8,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
}

func (m *ListTracesRequest) Reset()                    { *m = ListTracesRequest{} }
func (m *ListTracesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTracesRequest) ProtoMessage()               {}
func (*ListTracesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListTracesRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *ListTracesRequest) GetView() ListTracesRequest_ViewType {
	if m != nil {
		return m.View
	}
	return ListTracesRequest_VIEW_TYPE_UNSPECIFIED
}

func (m *ListTracesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListTracesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListTracesRequest) GetStartTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *ListTracesRequest) GetEndTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *ListTracesRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListTracesRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

// The response message for the `ListTraces` method.
type ListTracesResponse struct {
	// List of trace records returned.
	Traces []*Trace `protobuf:"bytes,1,rep,name=traces" json:"traces,omitempty"`
	// If defined, indicates that there are more traces that match the request
	// and that this value should be passed to the next request to continue
	// retrieving additional traces.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (m *ListTracesResponse) Reset()                    { *m = ListTracesResponse{} }
func (m *ListTracesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListTracesResponse) ProtoMessage()               {}
func (*ListTracesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListTracesResponse) GetTraces() []*Trace {
	if m != nil {
		return m.Traces
	}
	return nil
}

func (m *ListTracesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// The request message for the `GetTrace` method.
type GetTraceRequest struct {
	// ID of the Cloud project where the trace data is stored.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// ID of the trace to return.
	TraceId string `protobuf:"bytes,2,opt,name=trace_id,json=traceId" json:"trace_id,omitempty"`
}

func (m *GetTraceRequest) Reset()                    { *m = GetTraceRequest{} }
func (m *GetTraceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTraceRequest) ProtoMessage()               {}
func (*GetTraceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetTraceRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *GetTraceRequest) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

// The request message for the `PatchTraces` method.
type PatchTracesRequest struct {
	// ID of the Cloud project where the trace data is stored.
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// The body of the message.
	Traces *Traces `protobuf:"bytes,2,opt,name=traces" json:"traces,omitempty"`
}

func (m *PatchTracesRequest) Reset()                    { *m = PatchTracesRequest{} }
func (m *PatchTracesRequest) String() string            { return proto.CompactTextString(m) }
func (*PatchTracesRequest) ProtoMessage()               {}
func (*PatchTracesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PatchTracesRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *PatchTracesRequest) GetTraces() *Traces {
	if m != nil {
		return m.Traces
	}
	return nil
}

func init() {
	proto.RegisterType((*Trace)(nil), "google.devtools.cloudtrace.v1.Trace")
	proto.RegisterType((*Traces)(nil), "google.devtools.cloudtrace.v1.Traces")
	proto.RegisterType((*TraceSpan)(nil), "google.devtools.cloudtrace.v1.TraceSpan")
	proto.RegisterType((*ListTracesRequest)(nil), "google.devtools.cloudtrace.v1.ListTracesRequest")
	proto.RegisterType((*ListTracesResponse)(nil), "google.devtools.cloudtrace.v1.ListTracesResponse")
	proto.RegisterType((*GetTraceRequest)(nil), "google.devtools.cloudtrace.v1.GetTraceRequest")
	proto.RegisterType((*PatchTracesRequest)(nil), "google.devtools.cloudtrace.v1.PatchTracesRequest")
	proto.RegisterEnum("google.devtools.cloudtrace.v1.TraceSpan_SpanKind", TraceSpan_SpanKind_name, TraceSpan_SpanKind_value)
	proto.RegisterEnum("google.devtools.cloudtrace.v1.ListTracesRequest_ViewType", ListTracesRequest_ViewType_name, ListTracesRequest_ViewType_value)
}

func init() { proto.RegisterFile("google/devtools/cloudtrace/v1/trace.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 867 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0xc6, 0xf1, 0xc6, 0x71, 0x4e, 0x96, 0x6d, 0x18, 0xd1, 0xe2, 0xa6, 0x54, 0x2c, 0x56, 0x41,
	0x01, 0x84, 0xdd, 0xa4, 0x20, 0xb1, 0x15, 0x20, 0x75, 0x53, 0xb7, 0xb2, 0x36, 0x9b, 0xb5, 0x1c,
	0x13, 0x84, 0xb4, 0x92, 0x35, 0x1b, 0x4f, 0x17, 0xb3, 0x89, 0x6d, 0x3c, 0x93, 0x94, 0x6c, 0xd5,
	0x0b, 0xb8, 0xe4, 0x16, 0x71, 0xc5, 0x1b, 0x70, 0xc9, 0x63, 0x70, 0x87, 0x78, 0x05, 0x24, 0x5e,
	0x03, 0xcd, 0x8c, 0xdd, 0x8d, 0xb2, 0xa2, 0xc9, 0xc2, 0x4d, 0x34, 0xe7, 0xcc, 0xf9, 0xfd, 0xbe,
	0x6f, 0x62, 0x78, 0xef, 0x34, 0x4d, 0x4f, 0x27, 0xc4, 0x8e, 0xc8, 0x9c, 0xa5, 0xe9, 0x84, 0xda,
	0xe3, 0x49, 0x3a, 0x8b, 0x58, 0x8e, 0xc7, 0xc4, 0x9e, 0x77, 0x6c, 0x71, 0xb0, 0xb2, 0x3c, 0x65,
	0x29, 0xba, 0x2d, 0x43, 0xad, 0x32, 0xd4, 0xba, 0x08, 0xb5, 0xe6, 0x9d, 0xd6, 0x9b, 0x45, 0x25,
	0x9c, 0xc5, 0x36, 0x4e, 0x92, 0x94, 0x61, 0x16, 0xa7, 0x09, 0x95, 0xc9, 0xad, 0x5b, 0xc5, 0xad,
	0xb0, 0x4e, 0x66, 0x4f, 0x6c, 0x32, 0xcd, 0xd8, 0xa2, 0xb8, 0x7c, 0x6b, 0xf5, 0x92, 0xc5, 0x53,
	0x42, 0x19, 0x9e, 0x66, 0x32, 0xc0, 0xfc, 0x5e, 0x81, 0x6a, 0xc0, 0x1b, 0xa1, 0xdb, 0x00, 0x59,
	0x9e, 0x7e, 0x43, 0xc6, 0x2c, 0x8c, 0x23, 0x43, 0xd9, 0x55, 0xda, 0x75, 0xbf, 0x5e, 0x78, 0xdc,
	0x08, 0xdd, 0x04, 0x5d, 0x0c, 0xc4, 0x2f, 0x2b, 0xe2, 0xb2, 0x26, 0x6c, 0x37, 0x42, 0x9f, 0x43,
	0x95, 0x66, 0x38, 0xa1, 0x86, 0xba, 0xab, 0xb6, 0x1b, 0xdd, 0xb6, 0xf5, 0xd2, 0x75, 0x2c, 0xd1,
	0x6e, 0x98, 0xe1, 0xc4, 0x97, 0x69, 0xe6, 0x23, 0xd0, 0x84, 0x8f, 0xa2, 0x4f, 0x41, 0x13, 0x61,
	0xd4, 0x50, 0x44, 0xa9, 0x3b, 0x9b, 0x94, 0xf2, 0x8b, 0x1c, 0xf3, 0x6f, 0x15, 0xea, 0x2f, 0x8a,
	0xa3, 0x37, 0xa0, 0xc6, 0xcb, 0x97, 0xcb, 0x68, 0xbe, 0xc6, 0x4d, 0x37, 0x42, 0x0e, 0x6c, 0x9d,
	0xc5, 0x89, 0xdc, 0x62, 0xa7, 0xdb, 0xd9, 0x74, 0x5a, 0x8b, 0xff, 0x1c, 0xc4, 0x49, 0xe4, 0x8b,
	0x74, 0x84, 0x60, 0x2b, 0xc1, 0x53, 0x62, 0xa8, 0x02, 0x0c, 0x71, 0x46, 0x7b, 0x00, 0x94, 0xe1,
	0x9c, 0x85, 0x1c, 0x66, 0x63, 0x6b, 0x57, 0x69, 0x37, 0xba, 0xad, 0xb2, 0x41, 0xc9, 0x81, 0x15,
	0x94, 0x1c, 0xf8, 0x75, 0x11, 0xcd, 0x6d, 0xf4, 0x31, 0xe8, 0x24, 0x89, 0x64, 0x62, 0x75, 0x6d,
	0x62, 0x8d, 0x24, 0x91, 0x48, 0xbb, 0x03, 0x3b, 0x19, 0xce, 0x49, 0xc2, 0xc2, 0x72, 0x59, 0x4d,
	0x2c, 0xbb, 0x2d, 0xbd, 0x43, 0xb9, 0x72, 0x1f, 0xb4, 0x09, 0x3e, 0x21, 0x13, 0x6a, 0xd4, 0x04,
	0xae, 0x1f, 0x6d, 0xbc, 0x74, 0x5f, 0xa4, 0x39, 0x09, 0xcb, 0x17, 0x7e, 0x51, 0xa3, 0xb5, 0x07,
	0x8d, 0x25, 0x37, 0x6a, 0x82, 0x7a, 0x46, 0x16, 0x85, 0x62, 0xf8, 0x11, 0xbd, 0x0e, 0xd5, 0x39,
	0x9e, 0xcc, 0x48, 0x21, 0x14, 0x69, 0xdc, 0xaf, 0x7c, 0xa2, 0x98, 0x0e, 0xe8, 0x25, 0x8c, 0xe8,
	0x26, 0x5c, 0x1f, 0x7a, 0x0f, 0x06, 0xe1, 0x81, 0x3b, 0x78, 0x18, 0x7e, 0x31, 0x18, 0x7a, 0x4e,
	0xcf, 0x7d, 0xe4, 0x3a, 0x0f, 0x9b, 0xaf, 0xa0, 0x1d, 0x00, 0xdf, 0xeb, 0x85, 0x43, 0xc7, 0x1f,
	0x39, 0x7e, 0x53, 0x29, 0xed, 0x5e, 0xdf, 0x75, 0x06, 0x41, 0xb3, 0x62, 0xfe, 0xa6, 0xc2, 0x6b,
	0xfd, 0x98, 0x32, 0x29, 0x1b, 0x9f, 0x7c, 0x3b, 0x23, 0x94, 0xad, 0x53, 0xf0, 0x21, 0x6c, 0xcd,
	0x63, 0xf2, 0xb4, 0xe0, 0x7d, 0x6f, 0x0d, 0x04, 0x97, 0xca, 0x5b, 0xa3, 0x98, 0x3c, 0x0d, 0x16,
	0x19, 0xf1, 0x45, 0x19, 0x74, 0x0b, 0xea, 0x19, 0x3e, 0x25, 0x21, 0x8d, 0xcf, 0xa5, 0x08, 0xaa,
	0xbe, 0xce, 0x1d, 0xc3, 0xf8, 0x5c, 0x3e, 0x26, 0x7e, 0xc9, 0xd2, 0x33, 0x92, 0x08, 0x21, 0xf0,
	0x51, 0xf0, 0x29, 0x09, 0xb8, 0x63, 0x45, 0x27, 0xd5, 0xff, 0xaa, 0x13, 0x6d, 0x73, 0x9d, 0xdc,
	0x00, 0xed, 0x49, 0x3c, 0x61, 0x24, 0x37, 0x6a, 0x62, 0x98, 0xc2, 0xe2, 0xcf, 0x3a, 0xcd, 0x23,
	0x92, 0x87, 0x27, 0x0b, 0x43, 0x97, 0xcf, 0x5a, 0xd8, 0xfb, 0x0b, 0x73, 0x00, 0x7a, 0xb9, 0x32,
	0xe7, 0x6a, 0xe4, 0x3a, 0x5f, 0x86, 0xc1, 0x57, 0x9e, 0xb3, 0xc2, 0x55, 0x03, 0x6a, 0x87, 0xee,
	0xc0, 0x3d, 0x7c, 0xd0, 0x6f, 0x2a, 0x68, 0x1b, 0x74, 0xff, 0xe8, 0x28, 0xe0, 0xbc, 0x36, 0x2b,
	0xdc, 0xea, 0x1d, 0x1d, 0x7a, 0x7d, 0x27, 0x70, 0x9a, 0xaa, 0x79, 0x0e, 0x68, 0x19, 0x54, 0x9a,
	0xa5, 0x09, 0x25, 0xff, 0xef, 0xc9, 0xa3, 0x77, 0xe1, 0x5a, 0x42, 0xbe, 0x63, 0xe1, 0x12, 0xd8,
	0x52, 0x73, 0xaf, 0x72, 0xb7, 0x57, 0x02, 0x6e, 0x1e, 0xc0, 0xb5, 0xc7, 0x44, 0xb6, 0xde, 0x50,
	0x2d, 0xff, 0xfe, 0x7f, 0x67, 0xe6, 0x80, 0x3c, 0xcc, 0xc6, 0x5f, 0x5f, 0x49, 0x7d, 0x9f, 0xbd,
	0xd8, 0xb3, 0x22, 0x58, 0x7b, 0x67, 0x93, 0x3d, 0x69, 0xb9, 0x68, 0xf7, 0x0f, 0x15, 0xb6, 0xe5,
	0xab, 0x24, 0xf9, 0x3c, 0x1e, 0x13, 0xf4, 0x8b, 0x02, 0x70, 0x01, 0x27, 0xba, 0x7b, 0x55, 0x39,
	0xb7, 0x3a, 0x57, 0xc8, 0x90, 0x5c, 0x99, 0xed, 0x1f, 0xfe, 0xfc, 0xeb, 0xa7, 0x8a, 0x89, 0x76,
	0xf9, 0x07, 0xac, 0x58, 0x8d, 0xda, 0xcf, 0x2e, 0xd6, 0x7e, 0x6e, 0x17, 0xbc, 0xfc, 0xac, 0x80,
	0x5e, 0x02, 0x8e, 0xac, 0x35, 0x9d, 0x56, 0x98, 0x69, 0x6d, 0x24, 0x01, 0xf3, 0x9e, 0x18, 0xe6,
	0x43, 0xf4, 0xc1, 0xba, 0x61, 0xec, 0x67, 0x25, 0x91, 0xcf, 0xd1, 0x8f, 0x0a, 0x34, 0x96, 0xb8,
	0x43, 0xeb, 0x40, 0xb8, 0xcc, 0x73, 0xeb, 0xc6, 0xa5, 0xe7, 0xe6, 0xf0, 0x0f, 0xae, 0x79, 0x57,
	0xcc, 0xf3, 0x7e, 0x77, 0x2d, 0x38, 0xf7, 0x0b, 0x4e, 0xf7, 0x31, 0xbc, 0x3d, 0x4e, 0xa7, 0x2f,
	0x9f, 0x60, 0x1f, 0x44, 0x77, 0x8f, 0xf7, 0xf2, 0x94, 0x5f, 0x2b, 0xd7, 0x1f, 0xcb, 0xe8, 0x1e,
	0x0f, 0x92, 0x48, 0x58, 0xa3, 0xce, 0xef, 0xa5, 0xff, 0x58, 0xf8, 0x8f, 0x85, 0xff, 0x78, 0xd4,
	0x39, 0xd1, 0xc4, 0x90, 0xf7, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x19, 0x3a, 0x03, 0x52, 0x8d,
	0x08, 0x00, 0x00,
}
