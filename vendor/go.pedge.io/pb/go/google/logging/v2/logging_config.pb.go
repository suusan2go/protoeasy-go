// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/logging/v2/logging_config.proto

package google_logging_v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/go/google/api"
import _ "go.pedge.io/pb/go/google/protobuf"
import google_protobuf4 "go.pedge.io/pb/go/google/protobuf"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Available log entry formats. Log entries can be written to Stackdriver
// Logging in either format and can be exported in either format.
// Version 2 is the preferred format.
type LogSink_VersionFormat int32

const (
	// An unspecified version format will default to V2.
	LogSink_VERSION_FORMAT_UNSPECIFIED LogSink_VersionFormat = 0
	// `LogEntry` version 2 format.
	LogSink_V2 LogSink_VersionFormat = 1
	// `LogEntry` version 1 format.
	LogSink_V1 LogSink_VersionFormat = 2
)

var LogSink_VersionFormat_name = map[int32]string{
	0: "VERSION_FORMAT_UNSPECIFIED",
	1: "V2",
	2: "V1",
}
var LogSink_VersionFormat_value = map[string]int32{
	"VERSION_FORMAT_UNSPECIFIED": 0,
	"V2": 1,
	"V1": 2,
}

func (x LogSink_VersionFormat) String() string {
	return proto.EnumName(LogSink_VersionFormat_name, int32(x))
}
func (LogSink_VersionFormat) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

// Describes a sink used to export log entries outside of Stackdriver Logging.
// A logs filter controls which log entries are exported.  Sinks can have a
// start time and an end time; these can be used to place log entries from an
// exact time range into a particular destination.  If both `start_time` and
// `end_time` are present, then `start_time` must be less than `end_time`.
type LogSink struct {
	// Required. The client-assigned sink identifier, unique within the
	// project. Example: `"my-syslog-errors-to-pubsub"`.  Sink identifiers are
	// limited to 100 characters and can include only the following characters:
	// upper and lower-case alphanumeric characters, underscores, hyphens, and
	// periods.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Required. The export destination:
	//
	//     "storage.googleapis.com/[GCS_BUCKET]"
	//     "bigquery.googleapis.com/projects/[PROJECT_ID]/datasets/[DATASET]"
	//     "pubsub.googleapis.com/projects/[PROJECT_ID]/topics/[TOPIC_ID]"
	//
	// For more information,  see
	// [Exporting Logs With Sinks](/logging/docs/api/tasks/exporting-logs).
	Destination string `protobuf:"bytes,3,opt,name=destination" json:"destination,omitempty"`
	// Optional. An [advanced logs filter](/logging/docs/view/advanced_filters).
	// Only log entries matching the filter are exported. The filter
	// must be consistent with the log entry format specified by the
	// `outputVersionFormat` parameter, regardless of the format of the
	// log entry that was originally ingested by Stackdriver Logging.
	// The following example uses field names in the v2 log entry format:
	//
	//     logName="projects/[PROJECT_ID]/logs/[LOG_ID]" AND severity>=ERROR
	Filter string `protobuf:"bytes,5,opt,name=filter" json:"filter,omitempty"`
	// Optional. The log entry version to use for this sink's exported log
	// entries.  This version does not have to correspond to the version of the
	// log entry that was written to Stackdriver Logging. If omitted, the
	// v2 format is used.
	OutputVersionFormat LogSink_VersionFormat `protobuf:"varint,6,opt,name=output_version_format,json=outputVersionFormat,enum=google.logging.v2.LogSink_VersionFormat" json:"output_version_format,omitempty"`
	// Output only. An IAM identity&mdash;a service account or group&mdash;that
	// will write exported log entries to the destination on behalf of Stackdriver
	// Logging. You must grant this identity write-access to the destination.
	// Consult the destination service's documentation to determine the exact role
	// that must be granted.
	WriterIdentity string `protobuf:"bytes,8,opt,name=writer_identity,json=writerIdentity" json:"writer_identity,omitempty"`
	// Optional. The time at which this sink will begin exporting log entries.  If
	// this value is present, then log entries are exported only if `start_time`
	// <=`entry.timestamp`.
	StartTime *google_protobuf4.Timestamp `protobuf:"bytes,10,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// Optional. Time at which this sink will stop exporting log entries.  If this
	// value is present, then log entries are exported only if `entry.timestamp` <
	// `end_time`.
	EndTime *google_protobuf4.Timestamp `protobuf:"bytes,11,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
}

func (m *LogSink) Reset()                    { *m = LogSink{} }
func (m *LogSink) String() string            { return proto.CompactTextString(m) }
func (*LogSink) ProtoMessage()               {}
func (*LogSink) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *LogSink) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LogSink) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *LogSink) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *LogSink) GetOutputVersionFormat() LogSink_VersionFormat {
	if m != nil {
		return m.OutputVersionFormat
	}
	return LogSink_VERSION_FORMAT_UNSPECIFIED
}

func (m *LogSink) GetWriterIdentity() string {
	if m != nil {
		return m.WriterIdentity
	}
	return ""
}

func (m *LogSink) GetStartTime() *google_protobuf4.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *LogSink) GetEndTime() *google_protobuf4.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

// The parameters to `ListSinks`.
type ListSinksRequest struct {
	// Required. The resource name where this sink was created:
	//
	//     "projects/[PROJECT_ID]"
	//     "organizations/[ORGANIZATION_ID]"
	Parent string `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	// Optional. If present, then retrieve the next batch of results from the
	// preceding call to this method.  `pageToken` must be the value of
	// `nextPageToken` from the previous response.  The values of other method
	// parameters should be identical to those in the previous call.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
	// Optional. The maximum number of results to return from this request.
	// Non-positive values are ignored.  The presence of `nextPageToken` in the
	// response indicates that more results might be available.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
}

func (m *ListSinksRequest) Reset()                    { *m = ListSinksRequest{} }
func (m *ListSinksRequest) String() string            { return proto.CompactTextString(m) }
func (*ListSinksRequest) ProtoMessage()               {}
func (*ListSinksRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *ListSinksRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListSinksRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListSinksRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

// Result returned from `ListSinks`.
type ListSinksResponse struct {
	// A list of sinks.
	Sinks []*LogSink `protobuf:"bytes,1,rep,name=sinks" json:"sinks,omitempty"`
	// If there might be more results than appear in this response, then
	// `nextPageToken` is included.  To get the next set of results, call the same
	// method again using the value of `nextPageToken` as `pageToken`.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (m *ListSinksResponse) Reset()                    { *m = ListSinksResponse{} }
func (m *ListSinksResponse) String() string            { return proto.CompactTextString(m) }
func (*ListSinksResponse) ProtoMessage()               {}
func (*ListSinksResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *ListSinksResponse) GetSinks() []*LogSink {
	if m != nil {
		return m.Sinks
	}
	return nil
}

func (m *ListSinksResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// The parameters to `GetSink`.
type GetSinkRequest struct {
	// Required. The resource name of the sink to return:
	//
	//     "projects/[PROJECT_ID]/sinks/[SINK_ID]"
	//     "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
	SinkName string `protobuf:"bytes,1,opt,name=sink_name,json=sinkName" json:"sink_name,omitempty"`
}

func (m *GetSinkRequest) Reset()                    { *m = GetSinkRequest{} }
func (m *GetSinkRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSinkRequest) ProtoMessage()               {}
func (*GetSinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *GetSinkRequest) GetSinkName() string {
	if m != nil {
		return m.SinkName
	}
	return ""
}

// The parameters to `CreateSink`.
type CreateSinkRequest struct {
	// Required. The resource in which to create the sink:
	//
	//     "projects/[PROJECT_ID]"
	//     "organizations/[ORGANIZATION_ID]"
	Parent string `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	// Required. The new sink, whose `name` parameter is a sink identifier that
	// is not already in use.
	Sink *LogSink `protobuf:"bytes,2,opt,name=sink" json:"sink,omitempty"`
	// Optional. Whether the sink will have a dedicated service account returned
	// in the sink's writer_identity. Set this field to be true to export
	// logs from one project to a different project. This field is ignored for
	// non-project sinks (e.g. organization sinks) because those sinks are
	// required to have dedicated service accounts.
	UniqueWriterIdentity bool `protobuf:"varint,3,opt,name=unique_writer_identity,json=uniqueWriterIdentity" json:"unique_writer_identity,omitempty"`
}

func (m *CreateSinkRequest) Reset()                    { *m = CreateSinkRequest{} }
func (m *CreateSinkRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSinkRequest) ProtoMessage()               {}
func (*CreateSinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *CreateSinkRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateSinkRequest) GetSink() *LogSink {
	if m != nil {
		return m.Sink
	}
	return nil
}

func (m *CreateSinkRequest) GetUniqueWriterIdentity() bool {
	if m != nil {
		return m.UniqueWriterIdentity
	}
	return false
}

// The parameters to `UpdateSink`.
type UpdateSinkRequest struct {
	// Required. The resource name of the sink to update, including the parent
	// resource and the sink identifier:
	//
	//     "projects/[PROJECT_ID]/sinks/[SINK_ID]"
	//     "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
	//
	// Example: `"projects/my-project-id/sinks/my-sink-id"`.
	SinkName string `protobuf:"bytes,1,opt,name=sink_name,json=sinkName" json:"sink_name,omitempty"`
	// Required. The updated sink, whose name is the same identifier that appears
	// as part of `sinkName`.  If `sinkName` does not exist, then
	// this method creates a new sink.
	Sink *LogSink `protobuf:"bytes,2,opt,name=sink" json:"sink,omitempty"`
	// Optional. Whether the sink will have a dedicated service account returned
	// in the sink's writer_identity. Set this field to be true to export
	// logs from one project to a different project. This field is ignored for
	// non-project sinks (e.g. organization sinks) because those sinks are
	// required to have dedicated service accounts.
	UniqueWriterIdentity bool `protobuf:"varint,3,opt,name=unique_writer_identity,json=uniqueWriterIdentity" json:"unique_writer_identity,omitempty"`
}

func (m *UpdateSinkRequest) Reset()                    { *m = UpdateSinkRequest{} }
func (m *UpdateSinkRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateSinkRequest) ProtoMessage()               {}
func (*UpdateSinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *UpdateSinkRequest) GetSinkName() string {
	if m != nil {
		return m.SinkName
	}
	return ""
}

func (m *UpdateSinkRequest) GetSink() *LogSink {
	if m != nil {
		return m.Sink
	}
	return nil
}

func (m *UpdateSinkRequest) GetUniqueWriterIdentity() bool {
	if m != nil {
		return m.UniqueWriterIdentity
	}
	return false
}

// The parameters to `DeleteSink`.
type DeleteSinkRequest struct {
	// Required. The resource name of the sink to delete, including the parent
	// resource and the sink identifier:
	//
	//     "projects/[PROJECT_ID]/sinks/[SINK_ID]"
	//     "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
	//
	// It is an error if the sink does not exist.
	SinkName string `protobuf:"bytes,1,opt,name=sink_name,json=sinkName" json:"sink_name,omitempty"`
}

func (m *DeleteSinkRequest) Reset()                    { *m = DeleteSinkRequest{} }
func (m *DeleteSinkRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteSinkRequest) ProtoMessage()               {}
func (*DeleteSinkRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *DeleteSinkRequest) GetSinkName() string {
	if m != nil {
		return m.SinkName
	}
	return ""
}

func init() {
	proto.RegisterType((*LogSink)(nil), "google.logging.v2.LogSink")
	proto.RegisterType((*ListSinksRequest)(nil), "google.logging.v2.ListSinksRequest")
	proto.RegisterType((*ListSinksResponse)(nil), "google.logging.v2.ListSinksResponse")
	proto.RegisterType((*GetSinkRequest)(nil), "google.logging.v2.GetSinkRequest")
	proto.RegisterType((*CreateSinkRequest)(nil), "google.logging.v2.CreateSinkRequest")
	proto.RegisterType((*UpdateSinkRequest)(nil), "google.logging.v2.UpdateSinkRequest")
	proto.RegisterType((*DeleteSinkRequest)(nil), "google.logging.v2.DeleteSinkRequest")
	proto.RegisterEnum("google.logging.v2.LogSink_VersionFormat", LogSink_VersionFormat_name, LogSink_VersionFormat_value)
}

func init() { proto.RegisterFile("google/logging/v2/logging_config.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 758 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xd1, 0x4e, 0xe3, 0x46,
	0x14, 0xad, 0x03, 0x84, 0xe4, 0x22, 0x20, 0x99, 0x16, 0x6a, 0x99, 0x52, 0x52, 0x17, 0x68, 0x94,
	0xaa, 0x0e, 0x75, 0xdb, 0x87, 0x56, 0xaa, 0xaa, 0x12, 0x02, 0x8a, 0x44, 0x01, 0x39, 0x90, 0xbe,
	0x54, 0xb2, 0x4c, 0x32, 0xb1, 0xa6, 0xc4, 0x33, 0xc6, 0x9e, 0xa4, 0x05, 0x84, 0x54, 0xf5, 0x0f,
	0xd0, 0x4a, 0xfb, 0x11, 0xfb, 0x3b, 0xfb, 0x0b, 0xfb, 0x1d, 0xab, 0xd5, 0xcc, 0x38, 0x90, 0xc4,
	0xd9, 0x2c, 0x4f, 0xfb, 0x14, 0xdf, 0x73, 0xef, 0x9d, 0x73, 0xee, 0x9d, 0xa3, 0x09, 0xec, 0xfa,
	0x8c, 0xf9, 0x3d, 0x5c, 0xed, 0x31, 0xdf, 0x27, 0xd4, 0xaf, 0x0e, 0xec, 0xe1, 0xa7, 0xdb, 0x66,
	0xb4, 0x4b, 0x7c, 0x2b, 0x8c, 0x18, 0x67, 0xa8, 0xa8, 0xea, 0xac, 0x24, 0x69, 0x0d, 0x6c, 0xe3,
	0x8b, 0xa4, 0xd5, 0x0b, 0x49, 0xd5, 0xa3, 0x94, 0x71, 0x8f, 0x13, 0x46, 0x63, 0xd5, 0x60, 0x6c,
	0x24, 0x59, 0x19, 0x5d, 0xf6, 0xbb, 0x55, 0x1c, 0x84, 0xfc, 0x26, 0x49, 0x6e, 0x4d, 0x26, 0x39,
	0x09, 0x70, 0xcc, 0xbd, 0x20, 0x54, 0x05, 0xe6, 0xc3, 0x1c, 0x2c, 0x1e, 0x33, 0xbf, 0x49, 0xe8,
	0x15, 0x42, 0x30, 0x4f, 0xbd, 0x00, 0xeb, 0x5a, 0x49, 0x2b, 0xe7, 0x1d, 0xf9, 0x8d, 0x4a, 0xb0,
	0xd4, 0xc1, 0x31, 0x27, 0x54, 0x72, 0xea, 0x73, 0x32, 0x35, 0x0a, 0xa1, 0x75, 0xc8, 0x76, 0x49,
	0x8f, 0xe3, 0x48, 0x5f, 0x90, 0xc9, 0x24, 0x42, 0x7f, 0xc1, 0x1a, 0xeb, 0xf3, 0xb0, 0xcf, 0xdd,
	0x01, 0x8e, 0x62, 0xc2, 0xa8, 0xdb, 0x65, 0x51, 0xe0, 0x71, 0x3d, 0x5b, 0xd2, 0xca, 0x2b, 0x76,
	0xd9, 0x4a, 0x0d, 0x6a, 0x25, 0x42, 0xac, 0x96, 0x6a, 0x38, 0x94, 0xf5, 0xce, 0xa7, 0xea, 0x98,
	0x31, 0x10, 0x7d, 0x03, 0xab, 0xff, 0x44, 0x84, 0xe3, 0xc8, 0x25, 0x1d, 0x4c, 0x39, 0xe1, 0x37,
	0x7a, 0x4e, 0xd2, 0xaf, 0x28, 0xb8, 0x91, 0xa0, 0xe8, 0x67, 0x80, 0x98, 0x7b, 0x11, 0x77, 0xc5,
	0xe4, 0x3a, 0x94, 0xb4, 0xf2, 0x92, 0x6d, 0x0c, 0xb9, 0x87, 0x6b, 0xb1, 0xce, 0x87, 0x6b, 0x71,
	0xf2, 0xb2, 0x5a, 0xc4, 0xe8, 0x27, 0xc8, 0x61, 0xda, 0x51, 0x8d, 0x4b, 0x1f, 0x6c, 0x5c, 0xc4,
	0xb4, 0x23, 0x22, 0xf3, 0x37, 0x58, 0x1e, 0xd7, 0xfa, 0x25, 0x18, 0xad, 0xba, 0xd3, 0x6c, 0x9c,
	0x9e, 0xb8, 0x87, 0xa7, 0xce, 0x1f, 0xbf, 0x9f, 0xbb, 0x17, 0x27, 0xcd, 0xb3, 0x7a, 0xad, 0x71,
	0xd8, 0xa8, 0x1f, 0x14, 0x3e, 0x41, 0x59, 0xc8, 0xb4, 0xec, 0x82, 0x26, 0x7f, 0xbf, 0x2f, 0x64,
	0xcc, 0x2e, 0x14, 0x8e, 0x49, 0xcc, 0xc5, 0x2a, 0x62, 0x07, 0x5f, 0xf7, 0x71, 0xcc, 0xc5, 0x96,
	0x43, 0x2f, 0xc2, 0x94, 0x27, 0xb7, 0x93, 0x44, 0x68, 0x13, 0x20, 0xf4, 0x7c, 0xec, 0x72, 0x76,
	0x85, 0xa9, 0x9e, 0x91, 0xb9, 0xbc, 0x40, 0xce, 0x05, 0x80, 0x36, 0x40, 0x06, 0x6e, 0x4c, 0x6e,
	0xb1, 0xbc, 0xbc, 0x05, 0x27, 0x27, 0x80, 0x26, 0xb9, 0xc5, 0x66, 0x00, 0xc5, 0x11, 0x9e, 0x38,
	0x64, 0x34, 0xc6, 0x68, 0x0f, 0x16, 0x62, 0x01, 0xe8, 0x5a, 0x69, 0x6e, 0x74, 0xe2, 0xf4, 0x35,
	0x39, 0xaa, 0x10, 0xed, 0xc2, 0x2a, 0xc5, 0xff, 0x72, 0x37, 0xa5, 0x63, 0x59, 0xc0, 0x67, 0x43,
	0x2d, 0xe6, 0x77, 0xb0, 0x72, 0x84, 0x25, 0xdb, 0x70, 0xa8, 0x0d, 0xc8, 0x8b, 0x23, 0xdc, 0x11,
	0xd7, 0xe5, 0x04, 0x70, 0xe2, 0x05, 0xd8, 0x7c, 0xd0, 0xa0, 0x58, 0x8b, 0xb0, 0xc7, 0xf1, 0x68,
	0xcb, 0xfb, 0xf6, 0x60, 0xc1, 0xbc, 0xe8, 0x94, 0xcc, 0xb3, 0x55, 0xcb, 0x3a, 0xf4, 0x23, 0xac,
	0xf7, 0x29, 0xb9, 0xee, 0x63, 0x77, 0xd2, 0x46, 0x62, 0x4b, 0x39, 0xe7, 0x33, 0x95, 0xfd, 0x73,
	0xcc, 0x4c, 0xe6, 0x4b, 0x0d, 0x8a, 0x17, 0x61, 0x67, 0x42, 0xd3, 0xac, 0x31, 0x3e, 0x92, 0xb0,
	0x3d, 0x28, 0x1e, 0xe0, 0x1e, 0x7e, 0xbe, 0x2e, 0xfb, 0xed, 0x3c, 0xac, 0xd6, 0xe4, 0xc3, 0xd3,
	0xc4, 0xd1, 0x80, 0xb4, 0x71, 0xcb, 0x46, 0xf7, 0x90, 0x7f, 0x34, 0x04, 0xfa, 0x7a, 0x9a, 0xd4,
	0x09, 0x5b, 0x1a, 0xdb, 0xb3, 0x8b, 0x94, 0xa7, 0xcc, 0x9d, 0xff, 0x5f, 0xbf, 0x79, 0x91, 0xd9,
	0x42, 0x9b, 0xe2, 0xd5, 0xbb, 0x53, 0x37, 0xf6, 0x6b, 0x18, 0xb1, 0xbf, 0x71, 0x9b, 0xc7, 0xd5,
	0xca, 0x7d, 0x55, 0x19, 0x89, 0xc3, 0x62, 0x62, 0x10, 0xf4, 0xd5, 0x94, 0x73, 0xc7, 0xcd, 0x63,
	0xcc, 0x58, 0xa5, 0x59, 0x91, 0x84, 0xdb, 0xc8, 0x94, 0x84, 0x8f, 0x4b, 0x18, 0xe1, 0x54, 0x94,
	0xd5, 0xca, 0x3d, 0xba, 0x03, 0x78, 0xb2, 0x19, 0x9a, 0x36, 0x50, 0xca, 0x85, 0x33, 0xb9, 0xbf,
	0x95, 0xdc, 0x3b, 0xe6, 0xec, 0x61, 0x7f, 0x51, 0xb7, 0xfd, 0x9f, 0x06, 0xf0, 0x64, 0xa8, 0xa9,
	0xec, 0x29, 0xbf, 0xcd, 0x64, 0xdf, 0x93, 0xec, 0x15, 0xe3, 0x19, 0x93, 0x27, 0x12, 0x06, 0x00,
	0x4f, 0xd6, 0x99, 0xaa, 0x20, 0xe5, 0x2c, 0x63, 0x3d, 0xf5, 0x0e, 0xd6, 0xc5, 0x9f, 0xce, 0x70,
	0xef, 0x95, 0x67, 0xb0, 0xef, 0xef, 0xc3, 0x5a, 0x9b, 0x05, 0x69, 0xba, 0xfd, 0xe5, 0x63, 0xf5,
	0xad, 0xdc, 0x79, 0xa6, 0xbd, 0xca, 0x7c, 0x7e, 0xa4, 0x8a, 0x6a, 0x3d, 0xd6, 0xef, 0x58, 0x49,
	0xda, 0x6a, 0xd9, 0x97, 0x59, 0xc9, 0xff, 0xc3, 0xbb, 0x00, 0x00, 0x00, 0xff, 0xff, 0x37, 0xd5,
	0xc6, 0x27, 0x5d, 0x07, 0x00, 0x00,
}
