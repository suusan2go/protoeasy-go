// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/datastore/v1beta3/datastore.proto

package google_datastore_v1beta3

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/go/google/api"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The modes available for commits.
type CommitRequest_Mode int32

const (
	// Unspecified. This value must not be used.
	CommitRequest_MODE_UNSPECIFIED CommitRequest_Mode = 0
	// Transactional: The mutations are either all applied, or none are applied.
	// Learn about transactions [here](https://cloud.google.com/datastore/docs/concepts/transactions).
	CommitRequest_TRANSACTIONAL CommitRequest_Mode = 1
	// Non-transactional: The mutations may not apply as all or none.
	CommitRequest_NON_TRANSACTIONAL CommitRequest_Mode = 2
)

var CommitRequest_Mode_name = map[int32]string{
	0: "MODE_UNSPECIFIED",
	1: "TRANSACTIONAL",
	2: "NON_TRANSACTIONAL",
}
var CommitRequest_Mode_value = map[string]int32{
	"MODE_UNSPECIFIED":  0,
	"TRANSACTIONAL":     1,
	"NON_TRANSACTIONAL": 2,
}

func (x CommitRequest_Mode) String() string {
	return proto.EnumName(CommitRequest_Mode_name, int32(x))
}
func (CommitRequest_Mode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

// The possible values for read consistencies.
type ReadOptions_ReadConsistency int32

const (
	// Unspecified. This value must not be used.
	ReadOptions_READ_CONSISTENCY_UNSPECIFIED ReadOptions_ReadConsistency = 0
	// Strong consistency.
	ReadOptions_STRONG ReadOptions_ReadConsistency = 1
	// Eventual consistency.
	ReadOptions_EVENTUAL ReadOptions_ReadConsistency = 2
)

var ReadOptions_ReadConsistency_name = map[int32]string{
	0: "READ_CONSISTENCY_UNSPECIFIED",
	1: "STRONG",
	2: "EVENTUAL",
}
var ReadOptions_ReadConsistency_value = map[string]int32{
	"READ_CONSISTENCY_UNSPECIFIED": 0,
	"STRONG":                       1,
	"EVENTUAL":                     2,
}

func (x ReadOptions_ReadConsistency) String() string {
	return proto.EnumName(ReadOptions_ReadConsistency_name, int32(x))
}
func (ReadOptions_ReadConsistency) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{14, 0}
}

// The request for [Datastore.Lookup][google.datastore.v1beta3.Datastore.Lookup].
type LookupRequest struct {
	// The ID of the project against which to make the request.
	ProjectId string `protobuf:"bytes,8,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// The options for this lookup request.
	ReadOptions *ReadOptions `protobuf:"bytes,1,opt,name=read_options,json=readOptions" json:"read_options,omitempty"`
	// Keys of entities to look up.
	Keys []*Key `protobuf:"bytes,3,rep,name=keys" json:"keys,omitempty"`
}

func (m *LookupRequest) Reset()                    { *m = LookupRequest{} }
func (m *LookupRequest) String() string            { return proto.CompactTextString(m) }
func (*LookupRequest) ProtoMessage()               {}
func (*LookupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LookupRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *LookupRequest) GetReadOptions() *ReadOptions {
	if m != nil {
		return m.ReadOptions
	}
	return nil
}

func (m *LookupRequest) GetKeys() []*Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

// The response for [Datastore.Lookup][google.datastore.v1beta3.Datastore.Lookup].
type LookupResponse struct {
	// Entities found as `ResultType.FULL` entities. The order of results in this
	// field is undefined and has no relation to the order of the keys in the
	// input.
	Found []*EntityResult `protobuf:"bytes,1,rep,name=found" json:"found,omitempty"`
	// Entities not found as `ResultType.KEY_ONLY` entities. The order of results
	// in this field is undefined and has no relation to the order of the keys
	// in the input.
	Missing []*EntityResult `protobuf:"bytes,2,rep,name=missing" json:"missing,omitempty"`
	// A list of keys that were not looked up due to resource constraints. The
	// order of results in this field is undefined and has no relation to the
	// order of the keys in the input.
	Deferred []*Key `protobuf:"bytes,3,rep,name=deferred" json:"deferred,omitempty"`
}

func (m *LookupResponse) Reset()                    { *m = LookupResponse{} }
func (m *LookupResponse) String() string            { return proto.CompactTextString(m) }
func (*LookupResponse) ProtoMessage()               {}
func (*LookupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LookupResponse) GetFound() []*EntityResult {
	if m != nil {
		return m.Found
	}
	return nil
}

func (m *LookupResponse) GetMissing() []*EntityResult {
	if m != nil {
		return m.Missing
	}
	return nil
}

func (m *LookupResponse) GetDeferred() []*Key {
	if m != nil {
		return m.Deferred
	}
	return nil
}

// The request for [Datastore.RunQuery][google.datastore.v1beta3.Datastore.RunQuery].
type RunQueryRequest struct {
	// The ID of the project against which to make the request.
	ProjectId string `protobuf:"bytes,8,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// Entities are partitioned into subsets, identified by a partition ID.
	// Queries are scoped to a single partition.
	// This partition ID is normalized with the standard default context
	// partition ID.
	PartitionId *PartitionId `protobuf:"bytes,2,opt,name=partition_id,json=partitionId" json:"partition_id,omitempty"`
	// The options for this query.
	ReadOptions *ReadOptions `protobuf:"bytes,1,opt,name=read_options,json=readOptions" json:"read_options,omitempty"`
	// The type of query.
	//
	// Types that are valid to be assigned to QueryType:
	//	*RunQueryRequest_Query
	//	*RunQueryRequest_GqlQuery
	QueryType isRunQueryRequest_QueryType `protobuf_oneof:"query_type"`
}

func (m *RunQueryRequest) Reset()                    { *m = RunQueryRequest{} }
func (m *RunQueryRequest) String() string            { return proto.CompactTextString(m) }
func (*RunQueryRequest) ProtoMessage()               {}
func (*RunQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isRunQueryRequest_QueryType interface {
	isRunQueryRequest_QueryType()
}

type RunQueryRequest_Query struct {
	Query *Query `protobuf:"bytes,3,opt,name=query,oneof"`
}
type RunQueryRequest_GqlQuery struct {
	GqlQuery *GqlQuery `protobuf:"bytes,7,opt,name=gql_query,json=gqlQuery,oneof"`
}

func (*RunQueryRequest_Query) isRunQueryRequest_QueryType()    {}
func (*RunQueryRequest_GqlQuery) isRunQueryRequest_QueryType() {}

func (m *RunQueryRequest) GetQueryType() isRunQueryRequest_QueryType {
	if m != nil {
		return m.QueryType
	}
	return nil
}

func (m *RunQueryRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *RunQueryRequest) GetPartitionId() *PartitionId {
	if m != nil {
		return m.PartitionId
	}
	return nil
}

func (m *RunQueryRequest) GetReadOptions() *ReadOptions {
	if m != nil {
		return m.ReadOptions
	}
	return nil
}

func (m *RunQueryRequest) GetQuery() *Query {
	if x, ok := m.GetQueryType().(*RunQueryRequest_Query); ok {
		return x.Query
	}
	return nil
}

func (m *RunQueryRequest) GetGqlQuery() *GqlQuery {
	if x, ok := m.GetQueryType().(*RunQueryRequest_GqlQuery); ok {
		return x.GqlQuery
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RunQueryRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RunQueryRequest_OneofMarshaler, _RunQueryRequest_OneofUnmarshaler, _RunQueryRequest_OneofSizer, []interface{}{
		(*RunQueryRequest_Query)(nil),
		(*RunQueryRequest_GqlQuery)(nil),
	}
}

func _RunQueryRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RunQueryRequest)
	// query_type
	switch x := m.QueryType.(type) {
	case *RunQueryRequest_Query:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Query); err != nil {
			return err
		}
	case *RunQueryRequest_GqlQuery:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GqlQuery); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RunQueryRequest.QueryType has unexpected type %T", x)
	}
	return nil
}

func _RunQueryRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RunQueryRequest)
	switch tag {
	case 3: // query_type.query
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Query)
		err := b.DecodeMessage(msg)
		m.QueryType = &RunQueryRequest_Query{msg}
		return true, err
	case 7: // query_type.gql_query
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GqlQuery)
		err := b.DecodeMessage(msg)
		m.QueryType = &RunQueryRequest_GqlQuery{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RunQueryRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RunQueryRequest)
	// query_type
	switch x := m.QueryType.(type) {
	case *RunQueryRequest_Query:
		s := proto.Size(x.Query)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RunQueryRequest_GqlQuery:
		s := proto.Size(x.GqlQuery)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The response for [Datastore.RunQuery][google.datastore.v1beta3.Datastore.RunQuery].
type RunQueryResponse struct {
	// A batch of query results (always present).
	Batch *QueryResultBatch `protobuf:"bytes,1,opt,name=batch" json:"batch,omitempty"`
	// The parsed form of the `GqlQuery` from the request, if it was set.
	Query *Query `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
}

func (m *RunQueryResponse) Reset()                    { *m = RunQueryResponse{} }
func (m *RunQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*RunQueryResponse) ProtoMessage()               {}
func (*RunQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RunQueryResponse) GetBatch() *QueryResultBatch {
	if m != nil {
		return m.Batch
	}
	return nil
}

func (m *RunQueryResponse) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

// The request for [Datastore.BeginTransaction][google.datastore.v1beta3.Datastore.BeginTransaction].
type BeginTransactionRequest struct {
	// The ID of the project against which to make the request.
	ProjectId string `protobuf:"bytes,8,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (m *BeginTransactionRequest) Reset()                    { *m = BeginTransactionRequest{} }
func (m *BeginTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*BeginTransactionRequest) ProtoMessage()               {}
func (*BeginTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BeginTransactionRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

// The response for [Datastore.BeginTransaction][google.datastore.v1beta3.Datastore.BeginTransaction].
type BeginTransactionResponse struct {
	// The transaction identifier (always present).
	Transaction []byte `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (m *BeginTransactionResponse) Reset()                    { *m = BeginTransactionResponse{} }
func (m *BeginTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*BeginTransactionResponse) ProtoMessage()               {}
func (*BeginTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BeginTransactionResponse) GetTransaction() []byte {
	if m != nil {
		return m.Transaction
	}
	return nil
}

// The request for [Datastore.Rollback][google.datastore.v1beta3.Datastore.Rollback].
type RollbackRequest struct {
	// The ID of the project against which to make the request.
	ProjectId string `protobuf:"bytes,8,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// The transaction identifier, returned by a call to
	// [Datastore.BeginTransaction][google.datastore.v1beta3.Datastore.BeginTransaction].
	Transaction []byte `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (m *RollbackRequest) Reset()                    { *m = RollbackRequest{} }
func (m *RollbackRequest) String() string            { return proto.CompactTextString(m) }
func (*RollbackRequest) ProtoMessage()               {}
func (*RollbackRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RollbackRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *RollbackRequest) GetTransaction() []byte {
	if m != nil {
		return m.Transaction
	}
	return nil
}

// The response for [Datastore.Rollback][google.datastore.v1beta3.Datastore.Rollback].
// (an empty message).
type RollbackResponse struct {
}

func (m *RollbackResponse) Reset()                    { *m = RollbackResponse{} }
func (m *RollbackResponse) String() string            { return proto.CompactTextString(m) }
func (*RollbackResponse) ProtoMessage()               {}
func (*RollbackResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// The request for [Datastore.Commit][google.datastore.v1beta3.Datastore.Commit].
type CommitRequest struct {
	// The ID of the project against which to make the request.
	ProjectId string `protobuf:"bytes,8,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// The type of commit to perform. Defaults to `TRANSACTIONAL`.
	Mode CommitRequest_Mode `protobuf:"varint,5,opt,name=mode,enum=google.datastore.v1beta3.CommitRequest_Mode" json:"mode,omitempty"`
	// Must be set when mode is `TRANSACTIONAL`.
	//
	// Types that are valid to be assigned to TransactionSelector:
	//	*CommitRequest_Transaction
	TransactionSelector isCommitRequest_TransactionSelector `protobuf_oneof:"transaction_selector"`
	// The mutations to perform.
	//
	// When mode is `TRANSACTIONAL`, mutations affecting a single entity are
	// applied in order. The following sequences of mutations affecting a single
	// entity are not permitted in a single `Commit` request:
	//
	// - `insert` followed by `insert`
	// - `update` followed by `insert`
	// - `upsert` followed by `insert`
	// - `delete` followed by `update`
	//
	// When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single
	// entity.
	Mutations []*Mutation `protobuf:"bytes,6,rep,name=mutations" json:"mutations,omitempty"`
}

func (m *CommitRequest) Reset()                    { *m = CommitRequest{} }
func (m *CommitRequest) String() string            { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()               {}
func (*CommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type isCommitRequest_TransactionSelector interface {
	isCommitRequest_TransactionSelector()
}

type CommitRequest_Transaction struct {
	Transaction []byte `protobuf:"bytes,1,opt,name=transaction,proto3,oneof"`
}

func (*CommitRequest_Transaction) isCommitRequest_TransactionSelector() {}

func (m *CommitRequest) GetTransactionSelector() isCommitRequest_TransactionSelector {
	if m != nil {
		return m.TransactionSelector
	}
	return nil
}

func (m *CommitRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *CommitRequest) GetMode() CommitRequest_Mode {
	if m != nil {
		return m.Mode
	}
	return CommitRequest_MODE_UNSPECIFIED
}

func (m *CommitRequest) GetTransaction() []byte {
	if x, ok := m.GetTransactionSelector().(*CommitRequest_Transaction); ok {
		return x.Transaction
	}
	return nil
}

func (m *CommitRequest) GetMutations() []*Mutation {
	if m != nil {
		return m.Mutations
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CommitRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CommitRequest_OneofMarshaler, _CommitRequest_OneofUnmarshaler, _CommitRequest_OneofSizer, []interface{}{
		(*CommitRequest_Transaction)(nil),
	}
}

func _CommitRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CommitRequest)
	// transaction_selector
	switch x := m.TransactionSelector.(type) {
	case *CommitRequest_Transaction:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Transaction)
	case nil:
	default:
		return fmt.Errorf("CommitRequest.TransactionSelector has unexpected type %T", x)
	}
	return nil
}

func _CommitRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CommitRequest)
	switch tag {
	case 1: // transaction_selector.transaction
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.TransactionSelector = &CommitRequest_Transaction{x}
		return true, err
	default:
		return false, nil
	}
}

func _CommitRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CommitRequest)
	// transaction_selector
	switch x := m.TransactionSelector.(type) {
	case *CommitRequest_Transaction:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Transaction)))
		n += len(x.Transaction)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The response for [Datastore.Commit][google.datastore.v1beta3.Datastore.Commit].
type CommitResponse struct {
	// The result of performing the mutations.
	// The i-th mutation result corresponds to the i-th mutation in the request.
	MutationResults []*MutationResult `protobuf:"bytes,3,rep,name=mutation_results,json=mutationResults" json:"mutation_results,omitempty"`
	// The number of index entries updated during the commit, or zero if none were
	// updated.
	IndexUpdates int32 `protobuf:"varint,4,opt,name=index_updates,json=indexUpdates" json:"index_updates,omitempty"`
}

func (m *CommitResponse) Reset()                    { *m = CommitResponse{} }
func (m *CommitResponse) String() string            { return proto.CompactTextString(m) }
func (*CommitResponse) ProtoMessage()               {}
func (*CommitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CommitResponse) GetMutationResults() []*MutationResult {
	if m != nil {
		return m.MutationResults
	}
	return nil
}

func (m *CommitResponse) GetIndexUpdates() int32 {
	if m != nil {
		return m.IndexUpdates
	}
	return 0
}

// The request for [Datastore.AllocateIds][google.datastore.v1beta3.Datastore.AllocateIds].
type AllocateIdsRequest struct {
	// The ID of the project against which to make the request.
	ProjectId string `protobuf:"bytes,8,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// A list of keys with incomplete key paths for which to allocate IDs.
	// No key may be reserved/read-only.
	Keys []*Key `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *AllocateIdsRequest) Reset()                    { *m = AllocateIdsRequest{} }
func (m *AllocateIdsRequest) String() string            { return proto.CompactTextString(m) }
func (*AllocateIdsRequest) ProtoMessage()               {}
func (*AllocateIdsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *AllocateIdsRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *AllocateIdsRequest) GetKeys() []*Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

// The response for [Datastore.AllocateIds][google.datastore.v1beta3.Datastore.AllocateIds].
type AllocateIdsResponse struct {
	// The keys specified in the request (in the same order), each with
	// its key path completed with a newly allocated ID.
	Keys []*Key `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *AllocateIdsResponse) Reset()                    { *m = AllocateIdsResponse{} }
func (m *AllocateIdsResponse) String() string            { return proto.CompactTextString(m) }
func (*AllocateIdsResponse) ProtoMessage()               {}
func (*AllocateIdsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AllocateIdsResponse) GetKeys() []*Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

// A mutation to apply to an entity.
type Mutation struct {
	// The mutation operation.
	//
	// For `insert`, `update`, and `upsert`:
	// - The entity's key must not be reserved/read-only.
	// - No property in the entity may have a reserved name,
	//   not even a property in an entity in a value.
	// - No value in the entity may have meaning 18,
	//   not even a value in an entity in another value.
	//
	// Types that are valid to be assigned to Operation:
	//	*Mutation_Insert
	//	*Mutation_Update
	//	*Mutation_Upsert
	//	*Mutation_Delete
	Operation isMutation_Operation `protobuf_oneof:"operation"`
	// When set, the server will detect whether or not this mutation conflicts
	// with the current version of the entity on the server. Conflicting mutations
	// are not applied, and are marked as such in MutationResult.
	//
	// Types that are valid to be assigned to ConflictDetectionStrategy:
	//	*Mutation_BaseVersion
	ConflictDetectionStrategy isMutation_ConflictDetectionStrategy `protobuf_oneof:"conflict_detection_strategy"`
}

func (m *Mutation) Reset()                    { *m = Mutation{} }
func (m *Mutation) String() string            { return proto.CompactTextString(m) }
func (*Mutation) ProtoMessage()               {}
func (*Mutation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type isMutation_Operation interface {
	isMutation_Operation()
}
type isMutation_ConflictDetectionStrategy interface {
	isMutation_ConflictDetectionStrategy()
}

type Mutation_Insert struct {
	Insert *Entity `protobuf:"bytes,4,opt,name=insert,oneof"`
}
type Mutation_Update struct {
	Update *Entity `protobuf:"bytes,5,opt,name=update,oneof"`
}
type Mutation_Upsert struct {
	Upsert *Entity `protobuf:"bytes,6,opt,name=upsert,oneof"`
}
type Mutation_Delete struct {
	Delete *Key `protobuf:"bytes,7,opt,name=delete,oneof"`
}
type Mutation_BaseVersion struct {
	BaseVersion int64 `protobuf:"varint,8,opt,name=base_version,json=baseVersion,oneof"`
}

func (*Mutation_Insert) isMutation_Operation()                      {}
func (*Mutation_Update) isMutation_Operation()                      {}
func (*Mutation_Upsert) isMutation_Operation()                      {}
func (*Mutation_Delete) isMutation_Operation()                      {}
func (*Mutation_BaseVersion) isMutation_ConflictDetectionStrategy() {}

func (m *Mutation) GetOperation() isMutation_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}
func (m *Mutation) GetConflictDetectionStrategy() isMutation_ConflictDetectionStrategy {
	if m != nil {
		return m.ConflictDetectionStrategy
	}
	return nil
}

func (m *Mutation) GetInsert() *Entity {
	if x, ok := m.GetOperation().(*Mutation_Insert); ok {
		return x.Insert
	}
	return nil
}

func (m *Mutation) GetUpdate() *Entity {
	if x, ok := m.GetOperation().(*Mutation_Update); ok {
		return x.Update
	}
	return nil
}

func (m *Mutation) GetUpsert() *Entity {
	if x, ok := m.GetOperation().(*Mutation_Upsert); ok {
		return x.Upsert
	}
	return nil
}

func (m *Mutation) GetDelete() *Key {
	if x, ok := m.GetOperation().(*Mutation_Delete); ok {
		return x.Delete
	}
	return nil
}

func (m *Mutation) GetBaseVersion() int64 {
	if x, ok := m.GetConflictDetectionStrategy().(*Mutation_BaseVersion); ok {
		return x.BaseVersion
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Mutation) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Mutation_OneofMarshaler, _Mutation_OneofUnmarshaler, _Mutation_OneofSizer, []interface{}{
		(*Mutation_Insert)(nil),
		(*Mutation_Update)(nil),
		(*Mutation_Upsert)(nil),
		(*Mutation_Delete)(nil),
		(*Mutation_BaseVersion)(nil),
	}
}

func _Mutation_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Mutation)
	// operation
	switch x := m.Operation.(type) {
	case *Mutation_Insert:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Insert); err != nil {
			return err
		}
	case *Mutation_Update:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Update); err != nil {
			return err
		}
	case *Mutation_Upsert:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Upsert); err != nil {
			return err
		}
	case *Mutation_Delete:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Delete); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Mutation.Operation has unexpected type %T", x)
	}
	// conflict_detection_strategy
	switch x := m.ConflictDetectionStrategy.(type) {
	case *Mutation_BaseVersion:
		b.EncodeVarint(8<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.BaseVersion))
	case nil:
	default:
		return fmt.Errorf("Mutation.ConflictDetectionStrategy has unexpected type %T", x)
	}
	return nil
}

func _Mutation_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Mutation)
	switch tag {
	case 4: // operation.insert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Entity)
		err := b.DecodeMessage(msg)
		m.Operation = &Mutation_Insert{msg}
		return true, err
	case 5: // operation.update
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Entity)
		err := b.DecodeMessage(msg)
		m.Operation = &Mutation_Update{msg}
		return true, err
	case 6: // operation.upsert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Entity)
		err := b.DecodeMessage(msg)
		m.Operation = &Mutation_Upsert{msg}
		return true, err
	case 7: // operation.delete
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Key)
		err := b.DecodeMessage(msg)
		m.Operation = &Mutation_Delete{msg}
		return true, err
	case 8: // conflict_detection_strategy.base_version
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ConflictDetectionStrategy = &Mutation_BaseVersion{int64(x)}
		return true, err
	default:
		return false, nil
	}
}

func _Mutation_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Mutation)
	// operation
	switch x := m.Operation.(type) {
	case *Mutation_Insert:
		s := proto.Size(x.Insert)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Mutation_Update:
		s := proto.Size(x.Update)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Mutation_Upsert:
		s := proto.Size(x.Upsert)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Mutation_Delete:
		s := proto.Size(x.Delete)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// conflict_detection_strategy
	switch x := m.ConflictDetectionStrategy.(type) {
	case *Mutation_BaseVersion:
		n += proto.SizeVarint(8<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.BaseVersion))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The result of applying a mutation.
type MutationResult struct {
	// The automatically allocated key.
	// Set only when the mutation allocated a key.
	Key *Key `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	// The version of the entity on the server after processing the mutation. If
	// the mutation doesn't change anything on the server, then the version will
	// be the version of the current entity or, if no entity is present, a version
	// that is strictly greater than the version of any previous entity and less
	// than the version of any possible future entity.
	Version int64 `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	// Whether a conflict was detected for this mutation. Always false when a
	// conflict detection strategy field is not set in the mutation.
	ConflictDetected bool `protobuf:"varint,5,opt,name=conflict_detected,json=conflictDetected" json:"conflict_detected,omitempty"`
}

func (m *MutationResult) Reset()                    { *m = MutationResult{} }
func (m *MutationResult) String() string            { return proto.CompactTextString(m) }
func (*MutationResult) ProtoMessage()               {}
func (*MutationResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *MutationResult) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MutationResult) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *MutationResult) GetConflictDetected() bool {
	if m != nil {
		return m.ConflictDetected
	}
	return false
}

// The options shared by read requests.
type ReadOptions struct {
	// If not specified, lookups and ancestor queries default to
	// `read_consistency`=`STRONG`, global queries default to
	// `read_consistency`=`EVENTUAL`.
	//
	// Types that are valid to be assigned to ConsistencyType:
	//	*ReadOptions_ReadConsistency_
	//	*ReadOptions_Transaction
	ConsistencyType isReadOptions_ConsistencyType `protobuf_oneof:"consistency_type"`
}

func (m *ReadOptions) Reset()                    { *m = ReadOptions{} }
func (m *ReadOptions) String() string            { return proto.CompactTextString(m) }
func (*ReadOptions) ProtoMessage()               {}
func (*ReadOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type isReadOptions_ConsistencyType interface {
	isReadOptions_ConsistencyType()
}

type ReadOptions_ReadConsistency_ struct {
	ReadConsistency ReadOptions_ReadConsistency `protobuf:"varint,1,opt,name=read_consistency,json=readConsistency,enum=google.datastore.v1beta3.ReadOptions_ReadConsistency,oneof"`
}
type ReadOptions_Transaction struct {
	Transaction []byte `protobuf:"bytes,2,opt,name=transaction,proto3,oneof"`
}

func (*ReadOptions_ReadConsistency_) isReadOptions_ConsistencyType() {}
func (*ReadOptions_Transaction) isReadOptions_ConsistencyType()      {}

func (m *ReadOptions) GetConsistencyType() isReadOptions_ConsistencyType {
	if m != nil {
		return m.ConsistencyType
	}
	return nil
}

func (m *ReadOptions) GetReadConsistency() ReadOptions_ReadConsistency {
	if x, ok := m.GetConsistencyType().(*ReadOptions_ReadConsistency_); ok {
		return x.ReadConsistency
	}
	return ReadOptions_READ_CONSISTENCY_UNSPECIFIED
}

func (m *ReadOptions) GetTransaction() []byte {
	if x, ok := m.GetConsistencyType().(*ReadOptions_Transaction); ok {
		return x.Transaction
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReadOptions) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReadOptions_OneofMarshaler, _ReadOptions_OneofUnmarshaler, _ReadOptions_OneofSizer, []interface{}{
		(*ReadOptions_ReadConsistency_)(nil),
		(*ReadOptions_Transaction)(nil),
	}
}

func _ReadOptions_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReadOptions)
	// consistency_type
	switch x := m.ConsistencyType.(type) {
	case *ReadOptions_ReadConsistency_:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ReadConsistency))
	case *ReadOptions_Transaction:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Transaction)
	case nil:
	default:
		return fmt.Errorf("ReadOptions.ConsistencyType has unexpected type %T", x)
	}
	return nil
}

func _ReadOptions_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReadOptions)
	switch tag {
	case 1: // consistency_type.read_consistency
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ConsistencyType = &ReadOptions_ReadConsistency_{ReadOptions_ReadConsistency(x)}
		return true, err
	case 2: // consistency_type.transaction
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.ConsistencyType = &ReadOptions_Transaction{x}
		return true, err
	default:
		return false, nil
	}
}

func _ReadOptions_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReadOptions)
	// consistency_type
	switch x := m.ConsistencyType.(type) {
	case *ReadOptions_ReadConsistency_:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ReadConsistency))
	case *ReadOptions_Transaction:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Transaction)))
		n += len(x.Transaction)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*LookupRequest)(nil), "google.datastore.v1beta3.LookupRequest")
	proto.RegisterType((*LookupResponse)(nil), "google.datastore.v1beta3.LookupResponse")
	proto.RegisterType((*RunQueryRequest)(nil), "google.datastore.v1beta3.RunQueryRequest")
	proto.RegisterType((*RunQueryResponse)(nil), "google.datastore.v1beta3.RunQueryResponse")
	proto.RegisterType((*BeginTransactionRequest)(nil), "google.datastore.v1beta3.BeginTransactionRequest")
	proto.RegisterType((*BeginTransactionResponse)(nil), "google.datastore.v1beta3.BeginTransactionResponse")
	proto.RegisterType((*RollbackRequest)(nil), "google.datastore.v1beta3.RollbackRequest")
	proto.RegisterType((*RollbackResponse)(nil), "google.datastore.v1beta3.RollbackResponse")
	proto.RegisterType((*CommitRequest)(nil), "google.datastore.v1beta3.CommitRequest")
	proto.RegisterType((*CommitResponse)(nil), "google.datastore.v1beta3.CommitResponse")
	proto.RegisterType((*AllocateIdsRequest)(nil), "google.datastore.v1beta3.AllocateIdsRequest")
	proto.RegisterType((*AllocateIdsResponse)(nil), "google.datastore.v1beta3.AllocateIdsResponse")
	proto.RegisterType((*Mutation)(nil), "google.datastore.v1beta3.Mutation")
	proto.RegisterType((*MutationResult)(nil), "google.datastore.v1beta3.MutationResult")
	proto.RegisterType((*ReadOptions)(nil), "google.datastore.v1beta3.ReadOptions")
	proto.RegisterEnum("google.datastore.v1beta3.CommitRequest_Mode", CommitRequest_Mode_name, CommitRequest_Mode_value)
	proto.RegisterEnum("google.datastore.v1beta3.ReadOptions_ReadConsistency", ReadOptions_ReadConsistency_name, ReadOptions_ReadConsistency_value)
}

func init() { proto.RegisterFile("google/datastore/v1beta3/datastore.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x51, 0x6f, 0xdb, 0xd4,
	0x17, 0xaf, 0x93, 0x36, 0x4d, 0x4e, 0xd2, 0x34, 0xbb, 0xff, 0xfd, 0xc1, 0x0a, 0x1b, 0x44, 0x1e,
	0x63, 0x21, 0x8c, 0x84, 0x66, 0x4c, 0x83, 0x6a, 0x0f, 0x4d, 0xd2, 0x6c, 0x89, 0x58, 0x93, 0xee,
	0x26, 0xab, 0xc4, 0x93, 0xe5, 0xd8, 0xb7, 0xc1, 0xd4, 0xf1, 0x4d, 0xed, 0x9b, 0x89, 0x08, 0xf1,
	0xc2, 0x13, 0x02, 0xf1, 0x84, 0xf8, 0x00, 0xbc, 0xc2, 0x33, 0xf0, 0x15, 0x90, 0x90, 0x78, 0xe1,
	0x2b, 0xf0, 0x21, 0x78, 0x44, 0xbe, 0xbe, 0x6e, 0xea, 0x6c, 0x4e, 0x5c, 0xc4, 0x5b, 0x7c, 0xf2,
	0xfb, 0x9d, 0xf3, 0x3b, 0xe7, 0x5c, 0x9f, 0x73, 0x0d, 0xe5, 0x31, 0xa5, 0x63, 0x8b, 0xd4, 0x0c,
	0x8d, 0x69, 0x2e, 0xa3, 0x0e, 0xa9, 0x3d, 0xdf, 0x1b, 0x11, 0xa6, 0xdd, 0x5b, 0x58, 0xaa, 0x53,
	0x87, 0x32, 0x8a, 0x64, 0x1f, 0x59, 0x5d, 0xd8, 0x05, 0xb2, 0x78, 0x43, 0xf8, 0xd0, 0xa6, 0x66,
	0x4d, 0xb3, 0x6d, 0xca, 0x34, 0x66, 0x52, 0xdb, 0xf5, 0x79, 0xc5, 0xdb, 0x91, 0x11, 0x88, 0xcd,
	0x4c, 0x36, 0x17, 0xb0, 0x37, 0x23, 0x61, 0xe7, 0x33, 0xe2, 0x08, 0x94, 0xf2, 0x93, 0x04, 0x3b,
	0x4f, 0x28, 0x3d, 0x9b, 0x4d, 0x31, 0x39, 0x9f, 0x11, 0x97, 0xa1, 0x9b, 0x00, 0x53, 0x87, 0x7e,
	0x4a, 0x74, 0xa6, 0x9a, 0x86, 0x9c, 0x2e, 0x49, 0xe5, 0x0c, 0xce, 0x08, 0x4b, 0xd7, 0x40, 0x1d,
	0xc8, 0x39, 0x44, 0x33, 0x54, 0x3a, 0xe5, 0x9a, 0x64, 0xa9, 0x24, 0x95, 0xb3, 0xf5, 0xdb, 0xd5,
	0xa8, 0x64, 0xaa, 0x98, 0x68, 0x46, 0xdf, 0x07, 0xe3, 0xac, 0xb3, 0x78, 0x40, 0x7b, 0xb0, 0x79,
	0x46, 0xe6, 0xae, 0x9c, 0x2c, 0x25, 0xcb, 0xd9, 0xfa, 0xcd, 0x68, 0x0f, 0x1f, 0x91, 0x39, 0xe6,
	0x50, 0xe5, 0x77, 0x09, 0xf2, 0x81, 0x5a, 0x77, 0x4a, 0x6d, 0x97, 0xa0, 0x87, 0xb0, 0x75, 0x4a,
	0x67, 0xb6, 0x21, 0x4b, 0xdc, 0xcd, 0x5b, 0xd1, 0x6e, 0xda, 0xbc, 0x3a, 0x98, 0xb8, 0x33, 0x8b,
	0x61, 0x9f, 0x84, 0x0e, 0x60, 0x7b, 0x62, 0xba, 0xae, 0x69, 0x8f, 0xe5, 0xc4, 0x95, 0xf8, 0x01,
	0x0d, 0x7d, 0x08, 0x69, 0x83, 0x9c, 0x12, 0xc7, 0x21, 0x46, 0xbc, 0x4c, 0x2e, 0xe0, 0xca, 0x1f,
	0x09, 0xd8, 0xc5, 0x33, 0xfb, 0xa9, 0xd7, 0x8e, 0xf8, 0xd5, 0x9f, 0x6a, 0x0e, 0x33, 0xbd, 0x0a,
	0x7a, 0x80, 0xc4, 0xba, 0xea, 0x1f, 0x07, 0xe8, 0xae, 0x81, 0xb3, 0xd3, 0xc5, 0xc3, 0x7f, 0xd8,
	0xc7, 0x07, 0xb0, 0xc5, 0x4f, 0x94, 0x9c, 0xe4, 0x2e, 0xde, 0x88, 0x76, 0xc1, 0x33, 0xed, 0x6c,
	0x60, 0x1f, 0x8f, 0x1a, 0x90, 0x19, 0x9f, 0x5b, 0xaa, 0x4f, 0xde, 0xe6, 0x64, 0x25, 0x9a, 0xfc,
	0xf8, 0xdc, 0x0a, 0xf8, 0xe9, 0xb1, 0xf8, 0xdd, 0xcc, 0x01, 0x70, 0xba, 0xca, 0xe6, 0x53, 0xa2,
	0x7c, 0x23, 0x41, 0x61, 0x51, 0x50, 0x71, 0x40, 0x0e, 0x60, 0x6b, 0xa4, 0x31, 0xfd, 0x13, 0x91,
	0x61, 0x65, 0x8d, 0x3c, 0xbf, 0xbf, 0x4d, 0x8f, 0x81, 0x7d, 0x22, 0xba, 0x1f, 0x24, 0x98, 0x88,
	0x95, 0xa0, 0x48, 0x4f, 0xf9, 0x00, 0x5e, 0x6d, 0x92, 0xb1, 0x69, 0x0f, 0x1d, 0xcd, 0x76, 0x35,
	0xdd, 0x2b, 0x56, 0xbc, 0x2e, 0x2b, 0x0f, 0x41, 0x7e, 0x91, 0x29, 0xd2, 0x29, 0x41, 0x96, 0x2d,
	0xcc, 0x3c, 0xa9, 0x1c, 0xbe, 0x6c, 0x52, 0x30, 0xec, 0x62, 0x6a, 0x59, 0x23, 0x4d, 0x3f, 0x8b,
	0x79, 0xaa, 0xd6, 0xfb, 0x44, 0x50, 0x58, 0xf8, 0xf4, 0x95, 0x28, 0xbf, 0x24, 0x60, 0xa7, 0x45,
	0x27, 0x13, 0x93, 0xc5, 0x0c, 0x73, 0x00, 0x9b, 0x13, 0x6a, 0x10, 0x79, 0xab, 0x24, 0x95, 0xf3,
	0xf5, 0xbb, 0xd1, 0x65, 0x0c, 0x79, 0xad, 0x1e, 0x51, 0x83, 0x60, 0xce, 0x44, 0xca, 0x4b, 0x84,
	0x76, 0x36, 0x42, 0x52, 0xd1, 0x01, 0x64, 0x26, 0x33, 0x31, 0x31, 0xe5, 0x14, 0x7f, 0x23, 0x57,
	0x9c, 0xaa, 0x23, 0x01, 0xc5, 0x0b, 0x92, 0xf2, 0x08, 0x36, 0xbd, 0x98, 0xe8, 0x3a, 0x14, 0x8e,
	0xfa, 0x87, 0x6d, 0xf5, 0x59, 0x6f, 0x70, 0xdc, 0x6e, 0x75, 0x1f, 0x75, 0xdb, 0x87, 0x85, 0x0d,
	0x74, 0x0d, 0x76, 0x86, 0xb8, 0xd1, 0x1b, 0x34, 0x5a, 0xc3, 0x6e, 0xbf, 0xd7, 0x78, 0x52, 0x90,
	0xd0, 0xff, 0xe1, 0x5a, 0xaf, 0xdf, 0x53, 0xc3, 0xe6, 0x44, 0xf3, 0x15, 0xb8, 0x7e, 0x49, 0x98,
	0xea, 0x12, 0x8b, 0xe8, 0x8c, 0x3a, 0xca, 0xd7, 0x12, 0xe4, 0x83, 0x14, 0x45, 0x57, 0x07, 0x50,
	0x08, 0xe2, 0xab, 0x0e, 0x3f, 0x81, 0xc1, 0x5c, 0x2c, 0xc7, 0xd0, 0xee, 0x8f, 0xa4, 0xdd, 0x49,
	0xe8, 0xd9, 0x45, 0xb7, 0x60, 0xc7, 0xb4, 0x0d, 0xf2, 0x99, 0x3a, 0x9b, 0x1a, 0x1a, 0x23, 0xae,
	0xbc, 0x59, 0x92, 0xca, 0x5b, 0x38, 0xc7, 0x8d, 0xcf, 0x7c, 0x9b, 0x72, 0x0a, 0xa8, 0x61, 0x59,
	0x54, 0xd7, 0x18, 0xe9, 0x1a, 0x6e, 0xcc, 0x4e, 0x06, 0xa3, 0x5b, 0x8a, 0x3f, 0xba, 0x3b, 0xf0,
	0xbf, 0x50, 0x1c, 0x91, 0xf8, 0xbf, 0xf0, 0xf4, 0x5b, 0x02, 0xd2, 0x41, 0xea, 0x68, 0x1f, 0x52,
	0xa6, 0xed, 0x12, 0x87, 0xf1, 0xe4, 0xb2, 0xf5, 0xd2, 0xba, 0xf9, 0xdd, 0xd9, 0xc0, 0x82, 0xe1,
	0x71, 0xfd, 0xca, 0xf0, 0x13, 0x19, 0x93, 0xeb, 0x33, 0x7c, 0x2e, 0x8f, 0x9b, 0xba, 0x0a, 0x97,
	0xc7, 0x7d, 0x00, 0x29, 0x83, 0x58, 0x84, 0x11, 0x31, 0xf4, 0x56, 0x67, 0xed, 0x11, 0x7d, 0x38,
	0xba, 0x05, 0xb9, 0x91, 0xe6, 0x12, 0xf5, 0x39, 0x71, 0x5c, 0xef, 0xfc, 0x7b, 0x7d, 0x49, 0x76,
	0x24, 0x9c, 0xf5, 0xac, 0x27, 0xbe, 0xb1, 0x99, 0x85, 0x0c, 0x9d, 0x12, 0x87, 0x97, 0xa7, 0x79,
	0x13, 0x5e, 0xd3, 0xa9, 0x7d, 0x6a, 0x99, 0x3a, 0x53, 0x0d, 0xc2, 0x88, 0x38, 0x89, 0xcc, 0xd1,
	0x18, 0x19, 0xcf, 0x95, 0xaf, 0x24, 0xc8, 0x87, 0x4f, 0x11, 0xaa, 0x41, 0xf2, 0x8c, 0x04, 0xb3,
	0x7c, 0x4d, 0x3f, 0x3c, 0x24, 0x92, 0x61, 0x3b, 0xd0, 0xe3, 0xb5, 0x20, 0x89, 0x83, 0x47, 0xf4,
	0x0e, 0x5c, 0x5b, 0x0a, 0x4e, 0x0c, 0x5e, 0xea, 0x34, 0x2e, 0x04, 0x7f, 0x1c, 0x0a, 0xbb, 0xf2,
	0xb7, 0x04, 0xd9, 0x4b, 0x2b, 0x06, 0x8d, 0xa0, 0xc0, 0xf7, 0x93, 0x4e, 0x6d, 0xd7, 0x74, 0x19,
	0xb1, 0xf5, 0x39, 0x7f, 0xdf, 0xf3, 0xf5, 0xfb, 0xb1, 0x76, 0x14, 0xff, 0xdd, 0x5a, 0x90, 0x3b,
	0x1b, 0x78, 0xd7, 0x09, 0x9b, 0x96, 0xc7, 0x49, 0xe2, 0x25, 0xe3, 0x44, 0x39, 0x82, 0xdd, 0x25,
	0x4f, 0xa8, 0x04, 0x37, 0x70, 0xbb, 0x71, 0xa8, 0xb6, 0xfa, 0xbd, 0x41, 0x77, 0x30, 0x6c, 0xf7,
	0x5a, 0x1f, 0x2f, 0xcd, 0x08, 0x80, 0xd4, 0x60, 0x88, 0xfb, 0xbd, 0xc7, 0x05, 0x09, 0xe5, 0x20,
	0xdd, 0x3e, 0x69, 0xf7, 0x86, 0xcf, 0xf8, 0x4c, 0x40, 0x50, 0xb8, 0x94, 0x11, 0x5f, 0x5b, 0xf5,
	0x5f, 0xb7, 0x21, 0x73, 0x18, 0xe4, 0x82, 0xbe, 0x95, 0x20, 0xe5, 0xdf, 0x71, 0xd0, 0x9d, 0xe8,
	0x4c, 0x43, 0x77, 0xb6, 0x62, 0x79, 0x3d, 0x50, 0x0c, 0xed, 0xf7, 0xbe, 0xfc, 0xf3, 0xaf, 0xef,
	0x12, 0x15, 0xe5, 0xf6, 0xc5, 0x6d, 0x50, 0xbc, 0xd5, 0x6e, 0xed, 0xf3, 0xc5, 0x1b, 0xff, 0xc5,
	0xbe, 0xc5, 0x69, 0xfb, 0x52, 0x05, 0x7d, 0x2f, 0x41, 0x3a, 0x58, 0xaa, 0xe8, 0xed, 0x15, 0xb5,
	0x0f, 0xdf, 0x64, 0x8a, 0x95, 0x38, 0x50, 0xa1, 0xaa, 0xce, 0x55, 0xdd, 0x55, 0xee, 0xac, 0x51,
	0xe5, 0x08, 0xa2, 0xa7, 0xeb, 0x67, 0x09, 0x0a, 0xcb, 0x5b, 0x12, 0xed, 0x45, 0x07, 0x8d, 0xd8,
	0xc5, 0xc5, 0xfa, 0x55, 0x28, 0x42, 0xef, 0x3e, 0xd7, 0xfb, 0xbe, 0x52, 0x5b, 0xa3, 0x77, 0xb4,
	0xe4, 0xc0, 0xd3, 0xed, 0xf5, 0xd7, 0x9f, 0xfe, 0xab, 0xfa, 0x1b, 0x5a, 0x81, 0xab, 0xfa, 0x1b,
	0x5e, 0x24, 0xb1, 0xfb, 0xab, 0x73, 0xda, 0x45, 0x7f, 0xc5, 0x6e, 0x5f, 0xd9, 0xdf, 0xf0, 0x9d,
	0x62, 0x65, 0x7f, 0x97, 0xaf, 0x0a, 0xb1, 0xfb, 0x2b, 0x88, 0x9e, 0xae, 0x1f, 0x24, 0xc8, 0x5e,
	0xda, 0x18, 0x68, 0xc5, 0x7d, 0xe1, 0xc5, 0x05, 0x56, 0x7c, 0x37, 0x26, 0x5a, 0x08, 0xbc, 0xcf,
	0x05, 0xd6, 0x94, 0xca, 0x1a, 0x81, 0xda, 0x82, 0xbb, 0x2f, 0x55, 0x9a, 0x4f, 0xe1, 0x86, 0x4e,
	0x27, 0x91, 0xa1, 0x9a, 0xf9, 0x8b, 0xd7, 0xfa, 0xd8, 0xfb, 0xda, 0x3a, 0x96, 0x7e, 0x4c, 0xbc,
	0xfe, 0xd8, 0x07, 0xb7, 0x2c, 0x3a, 0x33, 0xaa, 0x17, 0xff, 0x57, 0x4f, 0xf6, 0x9a, 0x1e, 0x65,
	0x94, 0xe2, 0xdf, 0x65, 0xf7, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x01, 0xff, 0x88, 0x48,
	0x0e, 0x00, 0x00,
}
