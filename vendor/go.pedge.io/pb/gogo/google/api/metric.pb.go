// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/api/metric.proto

package google_api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The kind of measurement. It describes how the data is reported.
type MetricDescriptor_MetricKind int32

const (
	// Do not use this default value.
	MetricDescriptor_METRIC_KIND_UNSPECIFIED MetricDescriptor_MetricKind = 0
	// An instantaneous measurement of a value.
	MetricDescriptor_GAUGE MetricDescriptor_MetricKind = 1
	// The change in a value during a time interval.
	MetricDescriptor_DELTA MetricDescriptor_MetricKind = 2
	// A value accumulated over a time interval.  Cumulative
	// measurements in a time series should have the same start time
	// and increasing end times, until an event resets the cumulative
	// value to zero and sets a new start time for the following
	// points.
	MetricDescriptor_CUMULATIVE MetricDescriptor_MetricKind = 3
)

var MetricDescriptor_MetricKind_name = map[int32]string{
	0: "METRIC_KIND_UNSPECIFIED",
	1: "GAUGE",
	2: "DELTA",
	3: "CUMULATIVE",
}
var MetricDescriptor_MetricKind_value = map[string]int32{
	"METRIC_KIND_UNSPECIFIED": 0,
	"GAUGE":                   1,
	"DELTA":                   2,
	"CUMULATIVE":              3,
}

func (x MetricDescriptor_MetricKind) String() string {
	return proto.EnumName(MetricDescriptor_MetricKind_name, int32(x))
}
func (MetricDescriptor_MetricKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMetric, []int{0, 0}
}

// The value type of a metric.
type MetricDescriptor_ValueType int32

const (
	// Do not use this default value.
	MetricDescriptor_VALUE_TYPE_UNSPECIFIED MetricDescriptor_ValueType = 0
	// The value is a boolean.
	// This value type can be used only if the metric kind is `GAUGE`.
	MetricDescriptor_BOOL MetricDescriptor_ValueType = 1
	// The value is a signed 64-bit integer.
	MetricDescriptor_INT64 MetricDescriptor_ValueType = 2
	// The value is a double precision floating point number.
	MetricDescriptor_DOUBLE MetricDescriptor_ValueType = 3
	// The value is a text string.
	// This value type can be used only if the metric kind is `GAUGE`.
	MetricDescriptor_STRING MetricDescriptor_ValueType = 4
	// The value is a [`Distribution`][google.api.Distribution].
	MetricDescriptor_DISTRIBUTION MetricDescriptor_ValueType = 5
	// The value is money.
	MetricDescriptor_MONEY MetricDescriptor_ValueType = 6
)

var MetricDescriptor_ValueType_name = map[int32]string{
	0: "VALUE_TYPE_UNSPECIFIED",
	1: "BOOL",
	2: "INT64",
	3: "DOUBLE",
	4: "STRING",
	5: "DISTRIBUTION",
	6: "MONEY",
}
var MetricDescriptor_ValueType_value = map[string]int32{
	"VALUE_TYPE_UNSPECIFIED": 0,
	"BOOL":         1,
	"INT64":        2,
	"DOUBLE":       3,
	"STRING":       4,
	"DISTRIBUTION": 5,
	"MONEY":        6,
}

func (x MetricDescriptor_ValueType) String() string {
	return proto.EnumName(MetricDescriptor_ValueType_name, int32(x))
}
func (MetricDescriptor_ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMetric, []int{0, 1}
}

// Defines a metric type and its schema. Once a metric descriptor is created,
// deleting or altering it stops data collection and makes the metric type's
// existing data unusable.
type MetricDescriptor struct {
	// The resource name of the metric descriptor. Depending on the
	// implementation, the name typically includes: (1) the parent resource name
	// that defines the scope of the metric type or of its data; and (2) the
	// metric's URL-encoded type, which also appears in the `type` field of this
	// descriptor. For example, following is the resource name of a custom
	// metric within the GCP project `my-project-id`:
	//
	//     "projects/my-project-id/metricDescriptors/custom.googleapis.com%2Finvoice%2Fpaid%2Famount"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The metric type, including its DNS name prefix. The type is not
	// URL-encoded.  All user-defined custom metric types have the DNS name
	// `custom.googleapis.com`.  Metric types should use a natural hierarchical
	// grouping. For example:
	//
	//     "custom.googleapis.com/invoice/paid/amount"
	//     "appengine.googleapis.com/http/server/response_latencies"
	Type string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	// The set of labels that can be used to describe a specific
	// instance of this metric type. For example, the
	// `appengine.googleapis.com/http/server/response_latencies` metric
	// type has a label for the HTTP response code, `response_code`, so
	// you can look at latencies for successful responses or just
	// for responses that failed.
	Labels []*LabelDescriptor `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty"`
	// Whether the metric records instantaneous values, changes to a value, etc.
	// Some combinations of `metric_kind` and `value_type` might not be supported.
	MetricKind MetricDescriptor_MetricKind `protobuf:"varint,3,opt,name=metric_kind,json=metricKind,proto3,enum=google.api.MetricDescriptor_MetricKind" json:"metric_kind,omitempty"`
	// Whether the measurement is an integer, a floating-point number, etc.
	// Some combinations of `metric_kind` and `value_type` might not be supported.
	ValueType MetricDescriptor_ValueType `protobuf:"varint,4,opt,name=value_type,json=valueType,proto3,enum=google.api.MetricDescriptor_ValueType" json:"value_type,omitempty"`
	// The unit in which the metric value is reported. It is only applicable
	// if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The
	// supported units are a subset of [The Unified Code for Units of
	// Measure](http://unitsofmeasure.org/ucum.html) standard:
	//
	// **Basic units (UNIT)**
	//
	// * `bit`   bit
	// * `By`    byte
	// * `s`     second
	// * `min`   minute
	// * `h`     hour
	// * `d`     day
	//
	// **Prefixes (PREFIX)**
	//
	// * `k`     kilo    (10**3)
	// * `M`     mega    (10**6)
	// * `G`     giga    (10**9)
	// * `T`     tera    (10**12)
	// * `P`     peta    (10**15)
	// * `E`     exa     (10**18)
	// * `Z`     zetta   (10**21)
	// * `Y`     yotta   (10**24)
	// * `m`     milli   (10**-3)
	// * `u`     micro   (10**-6)
	// * `n`     nano    (10**-9)
	// * `p`     pico    (10**-12)
	// * `f`     femto   (10**-15)
	// * `a`     atto    (10**-18)
	// * `z`     zepto   (10**-21)
	// * `y`     yocto   (10**-24)
	// * `Ki`    kibi    (2**10)
	// * `Mi`    mebi    (2**20)
	// * `Gi`    gibi    (2**30)
	// * `Ti`    tebi    (2**40)
	//
	// **Grammar**
	//
	// The grammar includes the dimensionless unit `1`, such as `1/s`.
	//
	// The grammar also includes these connectors:
	//
	// * `/`    division (as an infix operator, e.g. `1/s`).
	// * `.`    multiplication (as an infix operator, e.g. `GBy.d`)
	//
	// The grammar for a unit is as follows:
	//
	//     Expression = Component { "." Component } { "/" Component } ;
	//
	//     Component = [ PREFIX ] UNIT [ Annotation ]
	//               | Annotation
	//               | "1"
	//               ;
	//
	//     Annotation = "{" NAME "}" ;
	//
	// Notes:
	//
	// * `Annotation` is just a comment if it follows a `UNIT` and is
	//    equivalent to `1` if it is used alone. For examples,
	//    `{requests}/s == 1/s`, `By{transmitted}/s == By/s`.
	// * `NAME` is a sequence of non-blank printable ASCII characters not
	//    containing '{' or '}'.
	Unit string `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// A detailed description of the metric, which can be used in documentation.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// A concise name for the metric, which can be displayed in user interfaces.
	// Use sentence case without an ending period, for example "Request count".
	DisplayName string `protobuf:"bytes,7,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (m *MetricDescriptor) Reset()                    { *m = MetricDescriptor{} }
func (m *MetricDescriptor) String() string            { return proto.CompactTextString(m) }
func (*MetricDescriptor) ProtoMessage()               {}
func (*MetricDescriptor) Descriptor() ([]byte, []int) { return fileDescriptorMetric, []int{0} }

func (m *MetricDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricDescriptor) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MetricDescriptor) GetLabels() []*LabelDescriptor {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MetricDescriptor) GetMetricKind() MetricDescriptor_MetricKind {
	if m != nil {
		return m.MetricKind
	}
	return MetricDescriptor_METRIC_KIND_UNSPECIFIED
}

func (m *MetricDescriptor) GetValueType() MetricDescriptor_ValueType {
	if m != nil {
		return m.ValueType
	}
	return MetricDescriptor_VALUE_TYPE_UNSPECIFIED
}

func (m *MetricDescriptor) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *MetricDescriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MetricDescriptor) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

// A specific metric, identified by specifying values for all of the
// labels of a [`MetricDescriptor`][google.api.MetricDescriptor].
type Metric struct {
	// An existing metric type, see [google.api.MetricDescriptor][google.api.MetricDescriptor].
	// For example, `custom.googleapis.com/invoice/paid/amount`.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// The set of label values that uniquely identify this metric. All
	// labels listed in the `MetricDescriptor` must be assigned values.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptorMetric, []int{1} }

func (m *Metric) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Metric) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func init() {
	proto.RegisterType((*MetricDescriptor)(nil), "google.api.MetricDescriptor")
	proto.RegisterType((*Metric)(nil), "google.api.Metric")
	proto.RegisterEnum("google.api.MetricDescriptor_MetricKind", MetricDescriptor_MetricKind_name, MetricDescriptor_MetricKind_value)
	proto.RegisterEnum("google.api.MetricDescriptor_ValueType", MetricDescriptor_ValueType_name, MetricDescriptor_ValueType_value)
}

func init() { proto.RegisterFile("google/api/metric.proto", fileDescriptorMetric) }

var fileDescriptorMetric = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xcd, 0x6a, 0xdb, 0x4c,
	0x14, 0xfd, 0xf4, 0x63, 0x7d, 0xf1, 0x75, 0x30, 0xc3, 0x50, 0x12, 0xe1, 0x40, 0x71, 0xbd, 0x48,
	0xbd, 0x72, 0x20, 0x29, 0xa1, 0xed, 0xce, 0xb6, 0xa6, 0xee, 0x10, 0x59, 0x32, 0x8a, 0x64, 0xc8,
	0x4a, 0x28, 0xf6, 0x10, 0x44, 0xf4, 0x57, 0x59, 0x09, 0xe8, 0x29, 0xfa, 0x04, 0xdd, 0xf4, 0x49,
	0xcb, 0xcc, 0x28, 0xb6, 0x70, 0xa1, 0xbb, 0xa3, 0x73, 0xcf, 0x3d, 0xf7, 0xde, 0xd1, 0x81, 0xf3,
	0xa7, 0x3c, 0x7f, 0x4a, 0xd8, 0x55, 0x54, 0xc4, 0x57, 0x29, 0xab, 0xca, 0x78, 0x33, 0x29, 0xca,
	0xbc, 0xca, 0x31, 0xc8, 0xc2, 0x24, 0x2a, 0xe2, 0xc1, 0x59, 0x4b, 0x94, 0x44, 0x8f, 0x2c, 0x91,
	0x9a, 0xd1, 0x2f, 0x1d, 0xd0, 0x52, 0x34, 0x59, 0x6c, 0xb7, 0x29, 0xe3, 0xa2, 0xca, 0x4b, 0x8c,
	0x41, 0xcf, 0xa2, 0x94, 0x99, 0xca, 0x50, 0x19, 0x77, 0x3d, 0x81, 0x39, 0x57, 0xd5, 0x05, 0x33,
	0x4f, 0x24, 0xc7, 0x31, 0xbe, 0x01, 0x43, 0x78, 0xed, 0x4c, 0x75, 0xa8, 0x8d, 0x7b, 0xd7, 0x17,
	0x93, 0xc3, 0xc4, 0x89, 0xcd, 0x2b, 0x07, 0x53, 0xaf, 0x91, 0xe2, 0xef, 0xd0, 0x93, 0x5b, 0x86,
	0xcf, 0x71, 0xb6, 0x35, 0xb5, 0xa1, 0x32, 0xee, 0x5f, 0x7f, 0x6c, 0x77, 0x1e, 0xef, 0xd3, 0x10,
	0x77, 0x71, 0xb6, 0xf5, 0x20, 0xdd, 0x63, 0x4c, 0x00, 0x5e, 0xa3, 0xe4, 0x85, 0x85, 0x62, 0x31,
	0x5d, 0x18, 0x5d, 0xfe, 0xd3, 0x68, 0xcd, 0xe5, 0x7e, 0x5d, 0x30, 0xaf, 0xfb, 0xfa, 0x06, 0xf9,
	0x65, 0x2f, 0x59, 0x5c, 0x99, 0x1d, 0x79, 0x19, 0xc7, 0x78, 0x08, 0xbd, 0x6d, 0xd3, 0x16, 0xe7,
	0x99, 0x69, 0x88, 0x52, 0x9b, 0xc2, 0x1f, 0xe0, 0x74, 0x1b, 0xef, 0x8a, 0x24, 0xaa, 0x43, 0xf1,
	0x56, 0xff, 0x37, 0x12, 0xc9, 0x39, 0x51, 0xca, 0x46, 0x2e, 0xc0, 0x61, 0x73, 0x7c, 0x01, 0xe7,
	0x4b, 0xe2, 0x7b, 0x74, 0x1e, 0xde, 0x51, 0xc7, 0x0a, 0x03, 0xe7, 0x7e, 0x45, 0xe6, 0xf4, 0x1b,
	0x25, 0x16, 0xfa, 0x0f, 0x77, 0xa1, 0xb3, 0x98, 0x06, 0x0b, 0x82, 0x14, 0x0e, 0x2d, 0x62, 0xfb,
	0x53, 0xa4, 0xe2, 0x3e, 0xc0, 0x3c, 0x58, 0x06, 0xf6, 0xd4, 0xa7, 0x6b, 0x82, 0xb4, 0xd1, 0x0f,
	0xe8, 0xee, 0x2f, 0xc0, 0x03, 0x38, 0x5b, 0x4f, 0xed, 0x80, 0x84, 0xfe, 0xc3, 0x8a, 0x1c, 0xd9,
	0x9d, 0x80, 0x3e, 0x73, 0x5d, 0x5b, 0xba, 0x51, 0xc7, 0xbf, 0xfd, 0x84, 0x54, 0x0c, 0x60, 0x58,
	0x6e, 0x30, 0xb3, 0x09, 0xd2, 0x38, 0xbe, 0xf7, 0x3d, 0xea, 0x2c, 0x90, 0x8e, 0x11, 0x9c, 0x5a,
	0x94, 0x7f, 0xcd, 0x02, 0x9f, 0xba, 0x0e, 0xea, 0xf0, 0xa6, 0xa5, 0xeb, 0x90, 0x07, 0x64, 0x8c,
	0x7e, 0x2a, 0x60, 0xc8, 0x23, 0xf6, 0x09, 0xd0, 0x5a, 0x09, 0xb8, 0x3d, 0x4a, 0xc0, 0xfb, 0xbf,
	0x9f, 0x5f, 0x06, 0x61, 0x47, 0xb2, 0xaa, 0xac, 0xdf, 0x42, 0x30, 0xf8, 0x02, 0xbd, 0x16, 0x8d,
	0x11, 0x68, 0xcf, 0xac, 0x6e, 0xf2, 0xc6, 0x21, 0x7e, 0x07, 0x1d, 0xf1, 0x87, 0x4c, 0x55, 0x70,
	0xf2, 0xe3, 0xab, 0xfa, 0x59, 0x99, 0x5d, 0x42, 0x7f, 0x93, 0xa7, 0xad, 0x39, 0xb3, 0x9e, 0x1c,
	0xb4, 0xe2, 0x81, 0x5e, 0x29, 0xbf, 0x55, 0x7d, 0x31, 0x5d, 0xd1, 0x47, 0x43, 0x04, 0xfc, 0xe6,
	0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x2a, 0x7b, 0xf6, 0x1f, 0x03, 0x00, 0x00,
}
