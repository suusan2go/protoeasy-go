// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: google/pubsub/v1/pubsub.proto

package google_pubsub_v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "go.pedge.io/pb/gogo/google/api"
import google_protobuf1 "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"
import google_protobuf3 "go.pedge.io/pb/gogo/google/protobuf"
import google_protobuf4 "github.com/gogo/protobuf/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// A topic resource.
type Topic struct {
	// The name of the topic. It must have the format
	// `"projects/{project}/topics/{topic}"`. `{topic}` must start with a letter,
	// and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
	// underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent
	// signs (`%`). It must be between 3 and 255 characters in length, and it
	// must not start with `"goog"`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// User labels.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Topic) Reset()                    { *m = Topic{} }
func (m *Topic) String() string            { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()               {}
func (*Topic) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{0} }

func (m *Topic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Topic) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// A message data and its attributes. The message payload must not be empty;
// it must contain either a non-empty data field, or at least one attribute.
type PubsubMessage struct {
	// The message payload.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Optional attributes for this message.
	Attributes map[string]string `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ID of this message, assigned by the server when the message is published.
	// Guaranteed to be unique within the topic. This value may be read by a
	// subscriber that receives a `PubsubMessage` via a `Pull` call or a push
	// delivery. It must not be populated by the publisher in a `Publish` call.
	MessageId string `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The time at which the message was published, populated by the server when
	// it receives the `Publish` call. It must not be populated by the
	// publisher in a `Publish` call.
	PublishTime *google_protobuf4.Timestamp `protobuf:"bytes,4,opt,name=publish_time,json=publishTime" json:"publish_time,omitempty"`
}

func (m *PubsubMessage) Reset()                    { *m = PubsubMessage{} }
func (m *PubsubMessage) String() string            { return proto.CompactTextString(m) }
func (*PubsubMessage) ProtoMessage()               {}
func (*PubsubMessage) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{1} }

func (m *PubsubMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PubsubMessage) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *PubsubMessage) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *PubsubMessage) GetPublishTime() *google_protobuf4.Timestamp {
	if m != nil {
		return m.PublishTime
	}
	return nil
}

// Request for the GetTopic method.
type GetTopicRequest struct {
	// The name of the topic to get.
	// Format is `projects/{project}/topics/{topic}`.
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (m *GetTopicRequest) Reset()                    { *m = GetTopicRequest{} }
func (m *GetTopicRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTopicRequest) ProtoMessage()               {}
func (*GetTopicRequest) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{2} }

func (m *GetTopicRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

// Request for the UpdateTopic method.
type UpdateTopicRequest struct {
	// The topic to update.
	Topic *Topic `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	// Indicates which fields in the provided topic to update.
	// Must be specified and non-empty.
	UpdateMask *google_protobuf3.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
}

func (m *UpdateTopicRequest) Reset()                    { *m = UpdateTopicRequest{} }
func (m *UpdateTopicRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateTopicRequest) ProtoMessage()               {}
func (*UpdateTopicRequest) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{3} }

func (m *UpdateTopicRequest) GetTopic() *Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *UpdateTopicRequest) GetUpdateMask() *google_protobuf3.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

// Request for the Publish method.
type PublishRequest struct {
	// The messages in the request will be published on this topic.
	// Format is `projects/{project}/topics/{topic}`.
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// The messages to publish.
	Messages []*PubsubMessage `protobuf:"bytes,2,rep,name=messages" json:"messages,omitempty"`
}

func (m *PublishRequest) Reset()                    { *m = PublishRequest{} }
func (m *PublishRequest) String() string            { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()               {}
func (*PublishRequest) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{4} }

func (m *PublishRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PublishRequest) GetMessages() []*PubsubMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

// Response for the `Publish` method.
type PublishResponse struct {
	// The server-assigned ID of each published message, in the same order as
	// the messages in the request. IDs are guaranteed to be unique within
	// the topic.
	MessageIds []string `protobuf:"bytes,1,rep,name=message_ids,json=messageIds" json:"message_ids,omitempty"`
}

func (m *PublishResponse) Reset()                    { *m = PublishResponse{} }
func (m *PublishResponse) String() string            { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()               {}
func (*PublishResponse) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{5} }

func (m *PublishResponse) GetMessageIds() []string {
	if m != nil {
		return m.MessageIds
	}
	return nil
}

// Request for the `ListTopics` method.
type ListTopicsRequest struct {
	// The name of the cloud project that topics belong to.
	// Format is `projects/{project}`.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Maximum number of topics to return.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The value returned by the last `ListTopicsResponse`; indicates that this is
	// a continuation of a prior `ListTopics` call, and that the system should
	// return the next page of data.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (m *ListTopicsRequest) Reset()                    { *m = ListTopicsRequest{} }
func (m *ListTopicsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTopicsRequest) ProtoMessage()               {}
func (*ListTopicsRequest) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{6} }

func (m *ListTopicsRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ListTopicsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListTopicsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// Response for the `ListTopics` method.
type ListTopicsResponse struct {
	// The resulting topics.
	Topics []*Topic `protobuf:"bytes,1,rep,name=topics" json:"topics,omitempty"`
	// If not empty, indicates that there may be more topics that match the
	// request; this value should be passed in a new `ListTopicsRequest`.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListTopicsResponse) Reset()                    { *m = ListTopicsResponse{} }
func (m *ListTopicsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListTopicsResponse) ProtoMessage()               {}
func (*ListTopicsResponse) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{7} }

func (m *ListTopicsResponse) GetTopics() []*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *ListTopicsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// Request for the `ListTopicSubscriptions` method.
type ListTopicSubscriptionsRequest struct {
	// The name of the topic that subscriptions are attached to.
	// Format is `projects/{project}/topics/{topic}`.
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Maximum number of subscription names to return.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The value returned by the last `ListTopicSubscriptionsResponse`; indicates
	// that this is a continuation of a prior `ListTopicSubscriptions` call, and
	// that the system should return the next page of data.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (m *ListTopicSubscriptionsRequest) Reset()         { *m = ListTopicSubscriptionsRequest{} }
func (m *ListTopicSubscriptionsRequest) String() string { return proto.CompactTextString(m) }
func (*ListTopicSubscriptionsRequest) ProtoMessage()    {}
func (*ListTopicSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPubsub, []int{8}
}

func (m *ListTopicSubscriptionsRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *ListTopicSubscriptionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListTopicSubscriptionsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// Response for the `ListTopicSubscriptions` method.
type ListTopicSubscriptionsResponse struct {
	// The names of the subscriptions that match the request.
	Subscriptions []string `protobuf:"bytes,1,rep,name=subscriptions" json:"subscriptions,omitempty"`
	// If not empty, indicates that there may be more subscriptions that match
	// the request; this value should be passed in a new
	// `ListTopicSubscriptionsRequest` to get more subscriptions.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListTopicSubscriptionsResponse) Reset()         { *m = ListTopicSubscriptionsResponse{} }
func (m *ListTopicSubscriptionsResponse) String() string { return proto.CompactTextString(m) }
func (*ListTopicSubscriptionsResponse) ProtoMessage()    {}
func (*ListTopicSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPubsub, []int{9}
}

func (m *ListTopicSubscriptionsResponse) GetSubscriptions() []string {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *ListTopicSubscriptionsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// Request for the `DeleteTopic` method.
type DeleteTopicRequest struct {
	// Name of the topic to delete.
	// Format is `projects/{project}/topics/{topic}`.
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (m *DeleteTopicRequest) Reset()                    { *m = DeleteTopicRequest{} }
func (m *DeleteTopicRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteTopicRequest) ProtoMessage()               {}
func (*DeleteTopicRequest) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{10} }

func (m *DeleteTopicRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

// A subscription resource.
type Subscription struct {
	// The name of the subscription. It must have the format
	// `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must
	// start with a letter, and contain only letters (`[A-Za-z]`), numbers
	// (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),
	// plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters
	// in length, and it must not start with `"goog"`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The name of the topic from which this subscription is receiving messages.
	// Format is `projects/{project}/topics/{topic}`.
	// The value of this field will be `_deleted-topic_` if the topic has been
	// deleted.
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// If push delivery is used with this subscription, this field is
	// used to configure it. An empty `pushConfig` signifies that the subscriber
	// will pull and ack messages using API methods.
	PushConfig *PushConfig `protobuf:"bytes,4,opt,name=push_config,json=pushConfig" json:"push_config,omitempty"`
	// This value is the maximum time after a subscriber receives a message
	// before the subscriber should acknowledge the message. After message
	// delivery but before the ack deadline expires and before the message is
	// acknowledged, it is an outstanding message and will not be delivered
	// again during that time (on a best-effort basis).
	//
	// For pull subscriptions, this value is used as the initial value for the ack
	// deadline. To override this value for a given message, call
	// `ModifyAckDeadline` with the corresponding `ack_id` if using
	// pull.
	// The minimum custom deadline you can specify is 10 seconds.
	// The maximum custom deadline you can specify is 600 seconds (10 minutes).
	// If this parameter is 0, a default value of 10 seconds is used.
	//
	// For push delivery, this value is also used to set the request timeout for
	// the call to the push endpoint.
	//
	// If the subscriber never acknowledges the message, the Pub/Sub
	// system will eventually redeliver the message.
	AckDeadlineSeconds int32 `protobuf:"varint,5,opt,name=ack_deadline_seconds,json=ackDeadlineSeconds,proto3" json:"ack_deadline_seconds,omitempty"`
	// Indicates whether to retain acknowledged messages. If true, then
	// messages are not expunged from the subscription's backlog, even if they are
	// acknowledged, until they fall out of the `message_retention_duration`
	// window.
	RetainAckedMessages bool `protobuf:"varint,7,opt,name=retain_acked_messages,json=retainAckedMessages,proto3" json:"retain_acked_messages,omitempty"`
	// How long to retain unacknowledged messages in the subscription's backlog,
	// from the moment a message is published.
	// If `retain_acked_messages` is true, then this also configures the retention
	// of acknowledged messages, and thus configures how far back in time a `Seek`
	// can be done. Defaults to 7 days. Cannot be more than 7 days or less than 10
	// minutes.
	MessageRetentionDuration *google_protobuf1.Duration `protobuf:"bytes,8,opt,name=message_retention_duration,json=messageRetentionDuration" json:"message_retention_duration,omitempty"`
	// User labels.
	Labels map[string]string `protobuf:"bytes,9,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Subscription) Reset()                    { *m = Subscription{} }
func (m *Subscription) String() string            { return proto.CompactTextString(m) }
func (*Subscription) ProtoMessage()               {}
func (*Subscription) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{11} }

func (m *Subscription) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Subscription) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Subscription) GetPushConfig() *PushConfig {
	if m != nil {
		return m.PushConfig
	}
	return nil
}

func (m *Subscription) GetAckDeadlineSeconds() int32 {
	if m != nil {
		return m.AckDeadlineSeconds
	}
	return 0
}

func (m *Subscription) GetRetainAckedMessages() bool {
	if m != nil {
		return m.RetainAckedMessages
	}
	return false
}

func (m *Subscription) GetMessageRetentionDuration() *google_protobuf1.Duration {
	if m != nil {
		return m.MessageRetentionDuration
	}
	return nil
}

func (m *Subscription) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// Configuration for a push delivery endpoint.
type PushConfig struct {
	// A URL locating the endpoint to which messages should be pushed.
	// For example, a Webhook endpoint might use "https://example.com/push".
	PushEndpoint string `protobuf:"bytes,1,opt,name=push_endpoint,json=pushEndpoint,proto3" json:"push_endpoint,omitempty"`
	// Endpoint configuration attributes.
	//
	// Every endpoint has a set of API supported attributes that can be used to
	// control different aspects of the message delivery.
	//
	// The currently supported attribute is `x-goog-version`, which you can
	// use to change the format of the pushed message. This attribute
	// indicates the version of the data expected by the endpoint. This
	// controls the shape of the pushed message (i.e., its fields and metadata).
	// The endpoint version is based on the version of the Pub/Sub API.
	//
	// If not present during the `CreateSubscription` call, it will default to
	// the version of the API used to make such call. If not present during a
	// `ModifyPushConfig` call, its value will not be changed. `GetSubscription`
	// calls will always return a valid version, even if the subscription was
	// created without this attribute.
	//
	// The possible values for this attribute are:
	//
	// * `v1beta1`: uses the push format defined in the v1beta1 Pub/Sub API.
	// * `v1` or `v1beta2`: uses the push format defined in the v1 Pub/Sub API.
	Attributes map[string]string `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PushConfig) Reset()                    { *m = PushConfig{} }
func (m *PushConfig) String() string            { return proto.CompactTextString(m) }
func (*PushConfig) ProtoMessage()               {}
func (*PushConfig) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{12} }

func (m *PushConfig) GetPushEndpoint() string {
	if m != nil {
		return m.PushEndpoint
	}
	return ""
}

func (m *PushConfig) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// A message and its corresponding acknowledgment ID.
type ReceivedMessage struct {
	// This ID can be used to acknowledge the received message.
	AckId string `protobuf:"bytes,1,opt,name=ack_id,json=ackId,proto3" json:"ack_id,omitempty"`
	// The message.
	Message *PubsubMessage `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *ReceivedMessage) Reset()                    { *m = ReceivedMessage{} }
func (m *ReceivedMessage) String() string            { return proto.CompactTextString(m) }
func (*ReceivedMessage) ProtoMessage()               {}
func (*ReceivedMessage) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{13} }

func (m *ReceivedMessage) GetAckId() string {
	if m != nil {
		return m.AckId
	}
	return ""
}

func (m *ReceivedMessage) GetMessage() *PubsubMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

// Request for the GetSubscription method.
type GetSubscriptionRequest struct {
	// The name of the subscription to get.
	// Format is `projects/{project}/subscriptions/{sub}`.
	Subscription string `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (m *GetSubscriptionRequest) Reset()                    { *m = GetSubscriptionRequest{} }
func (m *GetSubscriptionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSubscriptionRequest) ProtoMessage()               {}
func (*GetSubscriptionRequest) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{14} }

func (m *GetSubscriptionRequest) GetSubscription() string {
	if m != nil {
		return m.Subscription
	}
	return ""
}

// Request for the UpdateSubscription method.
type UpdateSubscriptionRequest struct {
	// The updated subscription object.
	Subscription *Subscription `protobuf:"bytes,1,opt,name=subscription" json:"subscription,omitempty"`
	// Indicates which fields in the provided subscription to update.
	// Must be specified and non-empty.
	UpdateMask *google_protobuf3.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
}

func (m *UpdateSubscriptionRequest) Reset()                    { *m = UpdateSubscriptionRequest{} }
func (m *UpdateSubscriptionRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateSubscriptionRequest) ProtoMessage()               {}
func (*UpdateSubscriptionRequest) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{15} }

func (m *UpdateSubscriptionRequest) GetSubscription() *Subscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

func (m *UpdateSubscriptionRequest) GetUpdateMask() *google_protobuf3.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

// Request for the `ListSubscriptions` method.
type ListSubscriptionsRequest struct {
	// The name of the cloud project that subscriptions belong to.
	// Format is `projects/{project}`.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Maximum number of subscriptions to return.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The value returned by the last `ListSubscriptionsResponse`; indicates that
	// this is a continuation of a prior `ListSubscriptions` call, and that the
	// system should return the next page of data.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (m *ListSubscriptionsRequest) Reset()                    { *m = ListSubscriptionsRequest{} }
func (m *ListSubscriptionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListSubscriptionsRequest) ProtoMessage()               {}
func (*ListSubscriptionsRequest) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{16} }

func (m *ListSubscriptionsRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ListSubscriptionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListSubscriptionsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// Response for the `ListSubscriptions` method.
type ListSubscriptionsResponse struct {
	// The subscriptions that match the request.
	Subscriptions []*Subscription `protobuf:"bytes,1,rep,name=subscriptions" json:"subscriptions,omitempty"`
	// If not empty, indicates that there may be more subscriptions that match
	// the request; this value should be passed in a new
	// `ListSubscriptionsRequest` to get more subscriptions.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListSubscriptionsResponse) Reset()                    { *m = ListSubscriptionsResponse{} }
func (m *ListSubscriptionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListSubscriptionsResponse) ProtoMessage()               {}
func (*ListSubscriptionsResponse) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{17} }

func (m *ListSubscriptionsResponse) GetSubscriptions() []*Subscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *ListSubscriptionsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// Request for the DeleteSubscription method.
type DeleteSubscriptionRequest struct {
	// The subscription to delete.
	// Format is `projects/{project}/subscriptions/{sub}`.
	Subscription string `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (m *DeleteSubscriptionRequest) Reset()                    { *m = DeleteSubscriptionRequest{} }
func (m *DeleteSubscriptionRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteSubscriptionRequest) ProtoMessage()               {}
func (*DeleteSubscriptionRequest) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{18} }

func (m *DeleteSubscriptionRequest) GetSubscription() string {
	if m != nil {
		return m.Subscription
	}
	return ""
}

// Request for the ModifyPushConfig method.
type ModifyPushConfigRequest struct {
	// The name of the subscription.
	// Format is `projects/{project}/subscriptions/{sub}`.
	Subscription string `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	// The push configuration for future deliveries.
	//
	// An empty `pushConfig` indicates that the Pub/Sub system should
	// stop pushing messages from the given subscription and allow
	// messages to be pulled and acknowledged - effectively pausing
	// the subscription if `Pull` is not called.
	PushConfig *PushConfig `protobuf:"bytes,2,opt,name=push_config,json=pushConfig" json:"push_config,omitempty"`
}

func (m *ModifyPushConfigRequest) Reset()                    { *m = ModifyPushConfigRequest{} }
func (m *ModifyPushConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ModifyPushConfigRequest) ProtoMessage()               {}
func (*ModifyPushConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{19} }

func (m *ModifyPushConfigRequest) GetSubscription() string {
	if m != nil {
		return m.Subscription
	}
	return ""
}

func (m *ModifyPushConfigRequest) GetPushConfig() *PushConfig {
	if m != nil {
		return m.PushConfig
	}
	return nil
}

// Request for the `Pull` method.
type PullRequest struct {
	// The subscription from which messages should be pulled.
	// Format is `projects/{project}/subscriptions/{sub}`.
	Subscription string `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	// If this field set to true, the system will respond immediately even if
	// it there are no messages available to return in the `Pull` response.
	// Otherwise, the system may wait (for a bounded amount of time) until at
	// least one message is available, rather than returning no messages. The
	// client may cancel the request if it does not wish to wait any longer for
	// the response.
	ReturnImmediately bool `protobuf:"varint,2,opt,name=return_immediately,json=returnImmediately,proto3" json:"return_immediately,omitempty"`
	// The maximum number of messages returned for this request. The Pub/Sub
	// system may return fewer than the number specified.
	MaxMessages int32 `protobuf:"varint,3,opt,name=max_messages,json=maxMessages,proto3" json:"max_messages,omitempty"`
}

func (m *PullRequest) Reset()                    { *m = PullRequest{} }
func (m *PullRequest) String() string            { return proto.CompactTextString(m) }
func (*PullRequest) ProtoMessage()               {}
func (*PullRequest) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{20} }

func (m *PullRequest) GetSubscription() string {
	if m != nil {
		return m.Subscription
	}
	return ""
}

func (m *PullRequest) GetReturnImmediately() bool {
	if m != nil {
		return m.ReturnImmediately
	}
	return false
}

func (m *PullRequest) GetMaxMessages() int32 {
	if m != nil {
		return m.MaxMessages
	}
	return 0
}

// Response for the `Pull` method.
type PullResponse struct {
	// Received Pub/Sub messages. The Pub/Sub system will return zero messages if
	// there are no more available in the backlog. The Pub/Sub system may return
	// fewer than the `maxMessages` requested even if there are more messages
	// available in the backlog.
	ReceivedMessages []*ReceivedMessage `protobuf:"bytes,1,rep,name=received_messages,json=receivedMessages" json:"received_messages,omitempty"`
}

func (m *PullResponse) Reset()                    { *m = PullResponse{} }
func (m *PullResponse) String() string            { return proto.CompactTextString(m) }
func (*PullResponse) ProtoMessage()               {}
func (*PullResponse) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{21} }

func (m *PullResponse) GetReceivedMessages() []*ReceivedMessage {
	if m != nil {
		return m.ReceivedMessages
	}
	return nil
}

// Request for the ModifyAckDeadline method.
type ModifyAckDeadlineRequest struct {
	// The name of the subscription.
	// Format is `projects/{project}/subscriptions/{sub}`.
	Subscription string `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	// List of acknowledgment IDs.
	AckIds []string `protobuf:"bytes,4,rep,name=ack_ids,json=ackIds" json:"ack_ids,omitempty"`
	// The new ack deadline with respect to the time this request was sent to
	// the Pub/Sub system. For example, if the value is 10, the new
	// ack deadline will expire 10 seconds after the `ModifyAckDeadline` call
	// was made. Specifying zero may immediately make the message available for
	// another pull request.
	// The minimum deadline you can specify is 0 seconds.
	// The maximum deadline you can specify is 600 seconds (10 minutes).
	AckDeadlineSeconds int32 `protobuf:"varint,3,opt,name=ack_deadline_seconds,json=ackDeadlineSeconds,proto3" json:"ack_deadline_seconds,omitempty"`
}

func (m *ModifyAckDeadlineRequest) Reset()                    { *m = ModifyAckDeadlineRequest{} }
func (m *ModifyAckDeadlineRequest) String() string            { return proto.CompactTextString(m) }
func (*ModifyAckDeadlineRequest) ProtoMessage()               {}
func (*ModifyAckDeadlineRequest) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{22} }

func (m *ModifyAckDeadlineRequest) GetSubscription() string {
	if m != nil {
		return m.Subscription
	}
	return ""
}

func (m *ModifyAckDeadlineRequest) GetAckIds() []string {
	if m != nil {
		return m.AckIds
	}
	return nil
}

func (m *ModifyAckDeadlineRequest) GetAckDeadlineSeconds() int32 {
	if m != nil {
		return m.AckDeadlineSeconds
	}
	return 0
}

// Request for the Acknowledge method.
type AcknowledgeRequest struct {
	// The subscription whose message is being acknowledged.
	// Format is `projects/{project}/subscriptions/{sub}`.
	Subscription string `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	// The acknowledgment ID for the messages being acknowledged that was returned
	// by the Pub/Sub system in the `Pull` response. Must not be empty.
	AckIds []string `protobuf:"bytes,2,rep,name=ack_ids,json=ackIds" json:"ack_ids,omitempty"`
}

func (m *AcknowledgeRequest) Reset()                    { *m = AcknowledgeRequest{} }
func (m *AcknowledgeRequest) String() string            { return proto.CompactTextString(m) }
func (*AcknowledgeRequest) ProtoMessage()               {}
func (*AcknowledgeRequest) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{23} }

func (m *AcknowledgeRequest) GetSubscription() string {
	if m != nil {
		return m.Subscription
	}
	return ""
}

func (m *AcknowledgeRequest) GetAckIds() []string {
	if m != nil {
		return m.AckIds
	}
	return nil
}

// Request for the `StreamingPull` streaming RPC method. This request is used to
// establish the initial stream as well as to stream acknowledgements and ack
// deadline modifications from the client to the server.
type StreamingPullRequest struct {
	// The subscription for which to initialize the new stream. This must be
	// provided in the first request on the stream, and must not be set in
	// subsequent requests from client to server.
	// Format is `projects/{project}/subscriptions/{sub}`.
	Subscription string `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	// List of acknowledgement IDs for acknowledging previously received messages
	// (received on this stream or a different stream). If an ack ID has expired,
	// the corresponding message may be redelivered later. Acknowledging a message
	// more than once will not result in an error. If the acknowledgement ID is
	// malformed, the stream will be aborted with status `INVALID_ARGUMENT`.
	AckIds []string `protobuf:"bytes,2,rep,name=ack_ids,json=ackIds" json:"ack_ids,omitempty"`
	// The list of new ack deadlines for the IDs listed in
	// `modify_deadline_ack_ids`. The size of this list must be the same as the
	// size of `modify_deadline_ack_ids`. If it differs the stream will be aborted
	// with `INVALID_ARGUMENT`. Each element in this list is applied to the
	// element in the same position in `modify_deadline_ack_ids`. The new ack
	// deadline is with respect to the time this request was sent to the Pub/Sub
	// system. Must be >= 0. For example, if the value is 10, the new ack deadline
	// will expire 10 seconds after this request is received. If the value is 0,
	// the message is immediately made available for another streaming or
	// non-streaming pull request. If the value is < 0 (an error), the stream will
	// be aborted with status `INVALID_ARGUMENT`.
	ModifyDeadlineSeconds []int32 `protobuf:"varint,3,rep,packed,name=modify_deadline_seconds,json=modifyDeadlineSeconds" json:"modify_deadline_seconds,omitempty"`
	// List of acknowledgement IDs whose deadline will be modified based on the
	// corresponding element in `modify_deadline_seconds`. This field can be used
	// to indicate that more time is needed to process a message by the
	// subscriber, or to make the message available for redelivery if the
	// processing was interrupted.
	ModifyDeadlineAckIds []string `protobuf:"bytes,4,rep,name=modify_deadline_ack_ids,json=modifyDeadlineAckIds" json:"modify_deadline_ack_ids,omitempty"`
	// The ack deadline to use for the stream. This must be provided in the
	// first request on the stream, but it can also be updated on subsequent
	// requests from client to server. The minimum deadline you can specify is 10
	// seconds. The maximum deadline you can specify is 600 seconds (10 minutes).
	StreamAckDeadlineSeconds int32 `protobuf:"varint,5,opt,name=stream_ack_deadline_seconds,json=streamAckDeadlineSeconds,proto3" json:"stream_ack_deadline_seconds,omitempty"`
}

func (m *StreamingPullRequest) Reset()                    { *m = StreamingPullRequest{} }
func (m *StreamingPullRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamingPullRequest) ProtoMessage()               {}
func (*StreamingPullRequest) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{24} }

func (m *StreamingPullRequest) GetSubscription() string {
	if m != nil {
		return m.Subscription
	}
	return ""
}

func (m *StreamingPullRequest) GetAckIds() []string {
	if m != nil {
		return m.AckIds
	}
	return nil
}

func (m *StreamingPullRequest) GetModifyDeadlineSeconds() []int32 {
	if m != nil {
		return m.ModifyDeadlineSeconds
	}
	return nil
}

func (m *StreamingPullRequest) GetModifyDeadlineAckIds() []string {
	if m != nil {
		return m.ModifyDeadlineAckIds
	}
	return nil
}

func (m *StreamingPullRequest) GetStreamAckDeadlineSeconds() int32 {
	if m != nil {
		return m.StreamAckDeadlineSeconds
	}
	return 0
}

// Response for the `StreamingPull` method. This response is used to stream
// messages from the server to the client.
type StreamingPullResponse struct {
	// Received Pub/Sub messages. This will not be empty.
	ReceivedMessages []*ReceivedMessage `protobuf:"bytes,1,rep,name=received_messages,json=receivedMessages" json:"received_messages,omitempty"`
}

func (m *StreamingPullResponse) Reset()                    { *m = StreamingPullResponse{} }
func (m *StreamingPullResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamingPullResponse) ProtoMessage()               {}
func (*StreamingPullResponse) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{25} }

func (m *StreamingPullResponse) GetReceivedMessages() []*ReceivedMessage {
	if m != nil {
		return m.ReceivedMessages
	}
	return nil
}

// Request for the `CreateSnapshot` method.
type CreateSnapshotRequest struct {
	// Optional user-provided name for this snapshot.
	// If the name is not provided in the request, the server will assign a random
	// name for this snapshot on the same project as the subscription.
	// Note that for REST API requests, you must specify a name.
	// Format is `projects/{project}/snapshots/{snap}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The subscription whose backlog the snapshot retains.
	// Specifically, the created snapshot is guaranteed to retain:
	//  (a) The existing backlog on the subscription. More precisely, this is
	//      defined as the messages in the subscription's backlog that are
	//      unacknowledged upon the successful completion of the
	//      `CreateSnapshot` request; as well as:
	//  (b) Any messages published to the subscription's topic following the
	//      successful completion of the CreateSnapshot request.
	// Format is `projects/{project}/subscriptions/{sub}`.
	Subscription string `protobuf:"bytes,2,opt,name=subscription,proto3" json:"subscription,omitempty"`
}

func (m *CreateSnapshotRequest) Reset()                    { *m = CreateSnapshotRequest{} }
func (m *CreateSnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSnapshotRequest) ProtoMessage()               {}
func (*CreateSnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{26} }

func (m *CreateSnapshotRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateSnapshotRequest) GetSubscription() string {
	if m != nil {
		return m.Subscription
	}
	return ""
}

// Request for the UpdateSnapshot method.
type UpdateSnapshotRequest struct {
	// The updated snpashot object.
	Snapshot *Snapshot `protobuf:"bytes,1,opt,name=snapshot" json:"snapshot,omitempty"`
	// Indicates which fields in the provided snapshot to update.
	// Must be specified and non-empty.
	UpdateMask *google_protobuf3.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
}

func (m *UpdateSnapshotRequest) Reset()                    { *m = UpdateSnapshotRequest{} }
func (m *UpdateSnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateSnapshotRequest) ProtoMessage()               {}
func (*UpdateSnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{27} }

func (m *UpdateSnapshotRequest) GetSnapshot() *Snapshot {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

func (m *UpdateSnapshotRequest) GetUpdateMask() *google_protobuf3.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

// A snapshot resource.
type Snapshot struct {
	// The name of the snapshot.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The name of the topic from which this snapshot is retaining messages.
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// The snapshot is guaranteed to exist up until this time.
	// A newly-created snapshot expires no later than 7 days from the time of its
	// creation. Its exact lifetime is determined at creation by the existing
	// backlog in the source subscription. Specifically, the lifetime of the
	// snapshot is `7 days - (age of oldest unacked message in the subscription)`.
	// For example, consider a subscription whose oldest unacked message is 3 days
	// old. If a snapshot is created from this subscription, the snapshot -- which
	// will always capture this 3-day-old backlog as long as the snapshot
	// exists -- will expire in 4 days.
	ExpireTime *google_protobuf4.Timestamp `protobuf:"bytes,3,opt,name=expire_time,json=expireTime" json:"expire_time,omitempty"`
	// User labels.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Snapshot) Reset()                    { *m = Snapshot{} }
func (m *Snapshot) String() string            { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()               {}
func (*Snapshot) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{28} }

func (m *Snapshot) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Snapshot) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Snapshot) GetExpireTime() *google_protobuf4.Timestamp {
	if m != nil {
		return m.ExpireTime
	}
	return nil
}

func (m *Snapshot) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// Request for the `ListSnapshots` method.
type ListSnapshotsRequest struct {
	// The name of the cloud project that snapshots belong to.
	// Format is `projects/{project}`.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Maximum number of snapshots to return.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The value returned by the last `ListSnapshotsResponse`; indicates that this
	// is a continuation of a prior `ListSnapshots` call, and that the system
	// should return the next page of data.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (m *ListSnapshotsRequest) Reset()                    { *m = ListSnapshotsRequest{} }
func (m *ListSnapshotsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListSnapshotsRequest) ProtoMessage()               {}
func (*ListSnapshotsRequest) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{29} }

func (m *ListSnapshotsRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ListSnapshotsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListSnapshotsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// Response for the `ListSnapshots` method.
type ListSnapshotsResponse struct {
	// The resulting snapshots.
	Snapshots []*Snapshot `protobuf:"bytes,1,rep,name=snapshots" json:"snapshots,omitempty"`
	// If not empty, indicates that there may be more snapshot that match the
	// request; this value should be passed in a new `ListSnapshotsRequest`.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListSnapshotsResponse) Reset()                    { *m = ListSnapshotsResponse{} }
func (m *ListSnapshotsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListSnapshotsResponse) ProtoMessage()               {}
func (*ListSnapshotsResponse) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{30} }

func (m *ListSnapshotsResponse) GetSnapshots() []*Snapshot {
	if m != nil {
		return m.Snapshots
	}
	return nil
}

func (m *ListSnapshotsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// Request for the `DeleteSnapshot` method.
type DeleteSnapshotRequest struct {
	// The name of the snapshot to delete.
	// Format is `projects/{project}/snapshots/{snap}`.
	Snapshot string `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (m *DeleteSnapshotRequest) Reset()                    { *m = DeleteSnapshotRequest{} }
func (m *DeleteSnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteSnapshotRequest) ProtoMessage()               {}
func (*DeleteSnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{31} }

func (m *DeleteSnapshotRequest) GetSnapshot() string {
	if m != nil {
		return m.Snapshot
	}
	return ""
}

// Request for the `Seek` method.
type SeekRequest struct {
	// The subscription to affect.
	Subscription string `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	// Types that are valid to be assigned to Target:
	//	*SeekRequest_Time
	//	*SeekRequest_Snapshot
	Target isSeekRequest_Target `protobuf_oneof:"target"`
}

func (m *SeekRequest) Reset()                    { *m = SeekRequest{} }
func (m *SeekRequest) String() string            { return proto.CompactTextString(m) }
func (*SeekRequest) ProtoMessage()               {}
func (*SeekRequest) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{32} }

type isSeekRequest_Target interface {
	isSeekRequest_Target()
}

type SeekRequest_Time struct {
	Time *google_protobuf4.Timestamp `protobuf:"bytes,2,opt,name=time,oneof"`
}
type SeekRequest_Snapshot struct {
	Snapshot string `protobuf:"bytes,3,opt,name=snapshot,proto3,oneof"`
}

func (*SeekRequest_Time) isSeekRequest_Target()     {}
func (*SeekRequest_Snapshot) isSeekRequest_Target() {}

func (m *SeekRequest) GetTarget() isSeekRequest_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *SeekRequest) GetSubscription() string {
	if m != nil {
		return m.Subscription
	}
	return ""
}

func (m *SeekRequest) GetTime() *google_protobuf4.Timestamp {
	if x, ok := m.GetTarget().(*SeekRequest_Time); ok {
		return x.Time
	}
	return nil
}

func (m *SeekRequest) GetSnapshot() string {
	if x, ok := m.GetTarget().(*SeekRequest_Snapshot); ok {
		return x.Snapshot
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SeekRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SeekRequest_OneofMarshaler, _SeekRequest_OneofUnmarshaler, _SeekRequest_OneofSizer, []interface{}{
		(*SeekRequest_Time)(nil),
		(*SeekRequest_Snapshot)(nil),
	}
}

func _SeekRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SeekRequest)
	// target
	switch x := m.Target.(type) {
	case *SeekRequest_Time:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Time); err != nil {
			return err
		}
	case *SeekRequest_Snapshot:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.Snapshot)
	case nil:
	default:
		return fmt.Errorf("SeekRequest.Target has unexpected type %T", x)
	}
	return nil
}

func _SeekRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SeekRequest)
	switch tag {
	case 2: // target.time
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf4.Timestamp)
		err := b.DecodeMessage(msg)
		m.Target = &SeekRequest_Time{msg}
		return true, err
	case 3: // target.snapshot
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Target = &SeekRequest_Snapshot{x}
		return true, err
	default:
		return false, nil
	}
}

func _SeekRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SeekRequest)
	// target
	switch x := m.Target.(type) {
	case *SeekRequest_Time:
		s := proto.Size(x.Time)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SeekRequest_Snapshot:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Snapshot)))
		n += len(x.Snapshot)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SeekResponse struct {
}

func (m *SeekResponse) Reset()                    { *m = SeekResponse{} }
func (m *SeekResponse) String() string            { return proto.CompactTextString(m) }
func (*SeekResponse) ProtoMessage()               {}
func (*SeekResponse) Descriptor() ([]byte, []int) { return fileDescriptorPubsub, []int{33} }

func init() {
	proto.RegisterType((*Topic)(nil), "google.pubsub.v1.Topic")
	proto.RegisterType((*PubsubMessage)(nil), "google.pubsub.v1.PubsubMessage")
	proto.RegisterType((*GetTopicRequest)(nil), "google.pubsub.v1.GetTopicRequest")
	proto.RegisterType((*UpdateTopicRequest)(nil), "google.pubsub.v1.UpdateTopicRequest")
	proto.RegisterType((*PublishRequest)(nil), "google.pubsub.v1.PublishRequest")
	proto.RegisterType((*PublishResponse)(nil), "google.pubsub.v1.PublishResponse")
	proto.RegisterType((*ListTopicsRequest)(nil), "google.pubsub.v1.ListTopicsRequest")
	proto.RegisterType((*ListTopicsResponse)(nil), "google.pubsub.v1.ListTopicsResponse")
	proto.RegisterType((*ListTopicSubscriptionsRequest)(nil), "google.pubsub.v1.ListTopicSubscriptionsRequest")
	proto.RegisterType((*ListTopicSubscriptionsResponse)(nil), "google.pubsub.v1.ListTopicSubscriptionsResponse")
	proto.RegisterType((*DeleteTopicRequest)(nil), "google.pubsub.v1.DeleteTopicRequest")
	proto.RegisterType((*Subscription)(nil), "google.pubsub.v1.Subscription")
	proto.RegisterType((*PushConfig)(nil), "google.pubsub.v1.PushConfig")
	proto.RegisterType((*ReceivedMessage)(nil), "google.pubsub.v1.ReceivedMessage")
	proto.RegisterType((*GetSubscriptionRequest)(nil), "google.pubsub.v1.GetSubscriptionRequest")
	proto.RegisterType((*UpdateSubscriptionRequest)(nil), "google.pubsub.v1.UpdateSubscriptionRequest")
	proto.RegisterType((*ListSubscriptionsRequest)(nil), "google.pubsub.v1.ListSubscriptionsRequest")
	proto.RegisterType((*ListSubscriptionsResponse)(nil), "google.pubsub.v1.ListSubscriptionsResponse")
	proto.RegisterType((*DeleteSubscriptionRequest)(nil), "google.pubsub.v1.DeleteSubscriptionRequest")
	proto.RegisterType((*ModifyPushConfigRequest)(nil), "google.pubsub.v1.ModifyPushConfigRequest")
	proto.RegisterType((*PullRequest)(nil), "google.pubsub.v1.PullRequest")
	proto.RegisterType((*PullResponse)(nil), "google.pubsub.v1.PullResponse")
	proto.RegisterType((*ModifyAckDeadlineRequest)(nil), "google.pubsub.v1.ModifyAckDeadlineRequest")
	proto.RegisterType((*AcknowledgeRequest)(nil), "google.pubsub.v1.AcknowledgeRequest")
	proto.RegisterType((*StreamingPullRequest)(nil), "google.pubsub.v1.StreamingPullRequest")
	proto.RegisterType((*StreamingPullResponse)(nil), "google.pubsub.v1.StreamingPullResponse")
	proto.RegisterType((*CreateSnapshotRequest)(nil), "google.pubsub.v1.CreateSnapshotRequest")
	proto.RegisterType((*UpdateSnapshotRequest)(nil), "google.pubsub.v1.UpdateSnapshotRequest")
	proto.RegisterType((*Snapshot)(nil), "google.pubsub.v1.Snapshot")
	proto.RegisterType((*ListSnapshotsRequest)(nil), "google.pubsub.v1.ListSnapshotsRequest")
	proto.RegisterType((*ListSnapshotsResponse)(nil), "google.pubsub.v1.ListSnapshotsResponse")
	proto.RegisterType((*DeleteSnapshotRequest)(nil), "google.pubsub.v1.DeleteSnapshotRequest")
	proto.RegisterType((*SeekRequest)(nil), "google.pubsub.v1.SeekRequest")
	proto.RegisterType((*SeekResponse)(nil), "google.pubsub.v1.SeekResponse")
}

func init() { proto.RegisterFile("google/pubsub/v1/pubsub.proto", fileDescriptorPubsub) }

var fileDescriptorPubsub = []byte{
	// 1998 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0xdb, 0x6f, 0xdb, 0xd6,
	0x19, 0xef, 0x91, 0x7c, 0x91, 0x3f, 0xfa, 0x96, 0x33, 0x3b, 0x51, 0x98, 0x9b, 0xcd, 0xb8, 0xb1,
	0xa2, 0x26, 0x92, 0xad, 0xa2, 0x5d, 0x93, 0xcc, 0x29, 0xec, 0x38, 0x4b, 0x33, 0x24, 0xab, 0x47,
	0x67, 0x1d, 0x30, 0x04, 0x13, 0x28, 0xf1, 0xc4, 0x61, 0x25, 0x91, 0x2c, 0x49, 0x79, 0x71, 0xb7,
	0x00, 0x5d, 0x3b, 0x0c, 0x18, 0x96, 0x87, 0x75, 0x7d, 0x1b, 0xfa, 0x30, 0x60, 0x6f, 0x7b, 0x1c,
	0xb0, 0xd7, 0xfd, 0x01, 0x7b, 0xdd, 0xbf, 0xb0, 0xc7, 0xbd, 0x6f, 0x8f, 0xc5, 0xb9, 0x90, 0xe2,
	0xe5, 0x50, 0xb2, 0xec, 0xe4, 0x8d, 0x3c, 0xdf, 0x77, 0xce, 0xf7, 0xfb, 0xee, 0x1f, 0x79, 0xe0,
	0xd2, 0x81, 0xe3, 0x1c, 0x74, 0x49, 0xdd, 0xed, 0xb7, 0xfc, 0x7e, 0xab, 0x7e, 0xb8, 0x29, 0x9e,
	0x6a, 0xae, 0xe7, 0x04, 0x0e, 0x5e, 0xe4, 0xe4, 0x9a, 0x58, 0x3c, 0xdc, 0x54, 0x2f, 0x8a, 0x0d,
	0x86, 0x6b, 0xd5, 0x0d, 0xdb, 0x76, 0x02, 0x23, 0xb0, 0x1c, 0xdb, 0xe7, 0xfc, 0xea, 0xe5, 0xf0,
	0x38, 0xfa, 0xd6, 0xea, 0x3f, 0xab, 0x9b, 0x7d, 0x8f, 0x31, 0x08, 0xfa, 0x85, 0x34, 0x9d, 0xf4,
	0xdc, 0xe0, 0x48, 0x10, 0x57, 0xd2, 0xc4, 0x67, 0x16, 0xe9, 0x9a, 0xcd, 0x9e, 0xe1, 0x77, 0x04,
	0xc7, 0x95, 0x34, 0x47, 0x60, 0xf5, 0x88, 0x1f, 0x18, 0x3d, 0x97, 0x33, 0x68, 0xdf, 0x20, 0x98,
	0x7c, 0xe2, 0xb8, 0x56, 0x1b, 0x63, 0x98, 0xb0, 0x8d, 0x1e, 0x29, 0xa3, 0x15, 0x54, 0x99, 0xd1,
	0xd9, 0x33, 0xbe, 0x03, 0x53, 0x5d, 0xa3, 0x45, 0xba, 0x7e, 0xb9, 0xb0, 0x52, 0xac, 0x28, 0x8d,
	0xab, 0xb5, 0xb4, 0x7a, 0x35, 0xb6, 0xb9, 0xf6, 0x88, 0x71, 0xdd, 0xb7, 0x03, 0xef, 0x48, 0x17,
	0x5b, 0xd4, 0x5b, 0xa0, 0xc4, 0x96, 0xf1, 0x22, 0x14, 0x3b, 0xe4, 0x48, 0x1c, 0x4f, 0x1f, 0xf1,
	0x12, 0x4c, 0x1e, 0x1a, 0xdd, 0x3e, 0x29, 0x17, 0xd8, 0x1a, 0x7f, 0xb9, 0x5d, 0xf8, 0x00, 0x69,
	0x5f, 0x17, 0x60, 0x6e, 0x8f, 0x89, 0x78, 0x4c, 0x7c, 0xdf, 0x38, 0x20, 0x14, 0x9d, 0x69, 0x04,
	0x06, 0xdb, 0x3e, 0xab, 0xb3, 0x67, 0xfc, 0x31, 0x80, 0x11, 0x04, 0x9e, 0xd5, 0xea, 0x07, 0x24,
	0x44, 0x58, 0xcf, 0x22, 0x4c, 0x1c, 0x54, 0xdb, 0x8e, 0x76, 0x70, 0xb4, 0xb1, 0x23, 0xf0, 0x25,
	0x80, 0x1e, 0x67, 0x6b, 0x5a, 0x66, 0xb9, 0xc8, 0x50, 0xcd, 0x88, 0x95, 0x87, 0x26, 0xde, 0x82,
	0x59, 0xb7, 0xdf, 0xea, 0x5a, 0xfe, 0xf3, 0x26, 0x35, 0x63, 0x79, 0x62, 0x05, 0x55, 0x94, 0x86,
	0x1a, 0x49, 0x14, 0x36, 0xae, 0x3d, 0x09, 0x6d, 0xac, 0x2b, 0x82, 0x9f, 0xae, 0xa8, 0x5b, 0xb0,
	0x90, 0x12, 0x3e, 0x96, 0x4d, 0xd6, 0x61, 0xe1, 0x01, 0x09, 0x98, 0xb9, 0x75, 0xf2, 0x59, 0x9f,
	0xf8, 0x01, 0x65, 0x0e, 0xe8, 0xbb, 0x38, 0x80, 0xbf, 0x68, 0x5f, 0x20, 0xc0, 0x3f, 0x75, 0x4d,
	0x23, 0x20, 0x09, 0xe6, 0x9b, 0x71, 0x66, 0xa5, 0x71, 0x2e, 0xc7, 0x95, 0xe2, 0x14, 0x7c, 0x07,
	0x94, 0x3e, 0x3b, 0x84, 0x85, 0x13, 0x83, 0x23, 0xd3, 0xf5, 0x87, 0x34, 0xe2, 0x1e, 0x1b, 0x7e,
	0x47, 0x07, 0xce, 0x4e, 0x9f, 0xb5, 0x36, 0xcc, 0xef, 0x71, 0xcd, 0x87, 0x42, 0xc5, 0x77, 0xa0,
	0x24, 0xcc, 0x1b, 0xfa, 0xef, 0xca, 0x08, 0xff, 0xe9, 0xd1, 0x06, 0xad, 0x01, 0x0b, 0x91, 0x10,
	0xdf, 0x75, 0x6c, 0x9f, 0xe0, 0x2b, 0xa0, 0x0c, 0x1c, 0xe8, 0x97, 0xd1, 0x4a, 0xb1, 0x32, 0xa3,
	0x43, 0xe4, 0x41, 0x5f, 0xb3, 0xe0, 0xcc, 0x23, 0xcb, 0xe7, 0x56, 0xf4, 0x43, 0x6c, 0x65, 0x98,
	0x76, 0x3d, 0xe7, 0x53, 0xd2, 0x0e, 0x04, 0xba, 0xf0, 0x15, 0x5f, 0x80, 0x19, 0x97, 0x1e, 0xe6,
	0x5b, 0x9f, 0x73, 0x8f, 0x4c, 0xea, 0x25, 0xba, 0xb0, 0x6f, 0x7d, 0x4e, 0x68, 0xb4, 0x30, 0x62,
	0xe0, 0x74, 0x88, 0x1d, 0x46, 0x0b, 0x5d, 0x79, 0x42, 0x17, 0xb4, 0x1e, 0xe0, 0xb8, 0x28, 0x81,
	0xb0, 0x0e, 0x53, 0x4c, 0x75, 0x0e, 0x6e, 0x88, 0x1b, 0x04, 0x1b, 0xbe, 0x06, 0x0b, 0x36, 0x79,
	0x11, 0x34, 0x63, 0xa2, 0x78, 0x68, 0xcc, 0xd1, 0xe5, 0xbd, 0x48, 0xdc, 0x67, 0x70, 0x29, 0x12,
	0xb7, 0xdf, 0x6f, 0xf9, 0x6d, 0xcf, 0x72, 0x59, 0xa1, 0x19, 0xee, 0x81, 0xd3, 0x68, 0x68, 0xc3,
	0xe5, 0x3c, 0x91, 0x42, 0xdb, 0x35, 0x98, 0xf3, 0xe3, 0x04, 0xe1, 0x91, 0xe4, 0xe2, 0xb1, 0x55,
	0xac, 0x02, 0xde, 0x25, 0x5d, 0x92, 0x8a, 0x6b, 0x79, 0x12, 0xfc, 0xa3, 0x08, 0xb3, 0x71, 0x4c,
	0xd2, 0xf2, 0x16, 0x6d, 0x2d, 0xc4, 0x4d, 0xb2, 0x05, 0x8a, 0xdb, 0xf7, 0x9f, 0x37, 0xdb, 0x8e,
	0xfd, 0xcc, 0x3a, 0x10, 0x59, 0x7e, 0x51, 0x16, 0x97, 0xfe, 0xf3, 0x7b, 0x8c, 0x47, 0x07, 0x37,
	0x7a, 0xc6, 0x1b, 0xb0, 0x64, 0xb4, 0x3b, 0x4d, 0x93, 0x18, 0x66, 0xd7, 0xb2, 0x49, 0xd3, 0x27,
	0x6d, 0xc7, 0x36, 0xfd, 0xf2, 0x24, 0x33, 0x2e, 0x36, 0xda, 0x9d, 0x5d, 0x41, 0xda, 0xe7, 0x14,
	0xdc, 0x80, 0x65, 0x8f, 0x04, 0x86, 0x65, 0x37, 0x8d, 0x76, 0x87, 0x98, 0xcd, 0x28, 0x25, 0xa6,
	0x57, 0x50, 0xa5, 0xa4, 0x7f, 0x8f, 0x13, 0xb7, 0x29, 0x4d, 0x64, 0x81, 0x8f, 0x7f, 0x06, 0x6a,
	0x18, 0xe9, 0x1e, 0x09, 0x88, 0x4d, 0x75, 0x6c, 0x86, 0xbd, 0xa3, 0x5c, 0x62, 0x98, 0xcf, 0x67,
	0xb2, 0x75, 0x57, 0x30, 0xe8, 0x65, 0xb1, 0x59, 0x0f, 0xf7, 0x86, 0x14, 0xbc, 0x13, 0x95, 0xfc,
	0x19, 0x16, 0xa0, 0xd5, 0xac, 0xe2, 0x71, 0xbb, 0xbe, 0xee, 0xca, 0xff, 0x4f, 0x04, 0x30, 0x30,
	0x2c, 0xbe, 0x0a, 0x73, 0xcc, 0x17, 0xc4, 0x36, 0x5d, 0xc7, 0xb2, 0xc3, 0x04, 0x9d, 0xa5, 0x8b,
	0xf7, 0xc5, 0x1a, 0x7e, 0x24, 0xe9, 0x03, 0x37, 0x86, 0xf9, 0x6b, 0x58, 0x13, 0x38, 0x6d, 0x99,
	0x6e, 0xc3, 0x82, 0x4e, 0xda, 0xc4, 0x3a, 0x8c, 0x9c, 0x85, 0x97, 0x61, 0x8a, 0x46, 0x84, 0x65,
	0x86, 0x21, 0x6a, 0xb4, 0x3b, 0x0f, 0x4d, 0x7c, 0x0b, 0xa6, 0x85, 0x17, 0x44, 0x75, 0x1d, 0x59,
	0xfb, 0x42, 0x7e, 0xed, 0x07, 0x70, 0xf6, 0x01, 0x09, 0xe2, 0x7e, 0x08, 0xb3, 0x41, 0x83, 0xd9,
	0x78, 0x72, 0x85, 0xf6, 0x8a, 0xaf, 0x69, 0xdf, 0x22, 0x38, 0xcf, 0x1b, 0x84, 0xec, 0x84, 0x1d,
	0xc9, 0x09, 0x4a, 0xe3, 0xf2, 0xf0, 0x30, 0x48, 0x4a, 0x38, 0x5d, 0xf3, 0x70, 0xa1, 0x4c, 0xcb,
	0x8a, 0xb4, 0x88, 0xbd, 0x99, 0x52, 0xfd, 0x7b, 0x04, 0xe7, 0x25, 0x22, 0x45, 0x11, 0xdb, 0x95,
	0x15, 0xb1, 0xd1, 0x16, 0x39, 0x61, 0x91, 0xfb, 0x10, 0xce, 0xf3, 0x22, 0x77, 0x52, 0xef, 0xfe,
	0x1a, 0xce, 0x3d, 0x76, 0x4c, 0xeb, 0xd9, 0x51, 0xac, 0x3e, 0x1d, 0x7f, 0x7b, 0xba, 0xfa, 0x15,
	0xc6, 0xab, 0x7e, 0xda, 0x57, 0x08, 0x94, 0xbd, 0x7e, 0xb7, 0x3b, 0x8e, 0xc8, 0x9b, 0x80, 0x3d,
	0x12, 0xf4, 0x3d, 0xbb, 0x69, 0xf5, 0x7a, 0xc4, 0xb4, 0x8c, 0x80, 0x74, 0x8f, 0x98, 0xe4, 0x92,
	0x7e, 0x86, 0x53, 0x1e, 0x0e, 0x08, 0x78, 0x15, 0x66, 0x7b, 0xc6, 0x8b, 0x41, 0x95, 0x2c, 0x32,
	0x67, 0x2b, 0x3d, 0xe3, 0x45, 0x58, 0x1d, 0xb5, 0x5f, 0xc0, 0x2c, 0x07, 0x21, 0x5c, 0xf8, 0x63,
	0x38, 0xe3, 0x89, 0xa4, 0x1c, 0xec, 0xe3, 0x6e, 0x5c, 0xcd, 0xaa, 0x96, 0xca, 0x5f, 0x7d, 0xd1,
	0x4b, 0x2e, 0xf8, 0x34, 0x60, 0xca, 0xdc, 0xc8, 0xdb, 0x83, 0x72, 0x3e, 0x8e, 0xca, 0xe7, 0x60,
	0x9a, 0x97, 0x04, 0xbf, 0x3c, 0xc1, 0x5a, 0xe2, 0x14, 0xab, 0x09, 0x7e, 0x6e, 0xf7, 0x28, 0xe6,
	0x75, 0x0f, 0xed, 0x27, 0x80, 0xb7, 0xdb, 0x1d, 0xdb, 0xf9, 0x65, 0x97, 0x98, 0x07, 0x27, 0x05,
	0x51, 0x88, 0x83, 0xd0, 0x7e, 0x53, 0x80, 0xa5, 0xfd, 0xc0, 0x23, 0x46, 0xcf, 0xb2, 0x0f, 0xc6,
	0xf5, 0x66, 0xde, 0xa9, 0xf8, 0x7d, 0x38, 0xd7, 0x63, 0x36, 0x93, 0x69, 0x57, 0xac, 0x4c, 0xea,
	0xcb, 0x9c, 0x9c, 0x6e, 0x8f, 0xef, 0x65, 0xf7, 0x25, 0x6d, 0xb7, 0x94, 0xdc, 0xb7, 0xcd, 0xc5,
	0x6d, 0xc1, 0x05, 0x9f, 0xe9, 0xd0, 0x1c, 0xd2, 0x8e, 0xcb, 0x9c, 0x65, 0x3b, 0x6b, 0xd6, 0x03,
	0x58, 0x4e, 0x99, 0xe0, 0x0d, 0xc5, 0xd2, 0xc7, 0xb0, 0x7c, 0xcf, 0x23, 0xb4, 0x18, 0xdb, 0x86,
	0xeb, 0x3f, 0x77, 0x82, 0xd0, 0xd8, 0xb2, 0x89, 0x25, 0xed, 0x80, 0x82, 0xa4, 0x00, 0xbc, 0x42,
	0xb0, 0x2c, 0xca, 0x7b, 0xea, 0xc4, 0xf7, 0xa1, 0xe4, 0x8b, 0x25, 0x51, 0xd6, 0x55, 0x49, 0x11,
	0x0b, 0x37, 0x45, 0xbc, 0xa7, 0x2b, 0xe7, 0xff, 0x45, 0x50, 0x0a, 0xcf, 0x1c, 0x63, 0x0a, 0xbb,
	0x03, 0x0a, 0x79, 0xe1, 0x5a, 0x1e, 0xe1, 0xdf, 0x5a, 0xc5, 0x91, 0xdf, 0x5a, 0xc0, 0xd9, 0xe9,
	0x02, 0xbe, 0x1b, 0x0d, 0x31, 0x13, 0xcc, 0x31, 0xd7, 0xf2, 0xd5, 0x7c, 0xdd, 0x03, 0x4c, 0x17,
	0x96, 0x58, 0x2b, 0x11, 0xc7, 0xbf, 0xe1, 0xce, 0x75, 0x04, 0xcb, 0x29, 0x69, 0x22, 0x4a, 0x3f,
	0x80, 0x99, 0xd0, 0x7d, 0x61, 0x74, 0x0e, 0xf3, 0xf5, 0x80, 0xf9, 0xd8, 0x8d, 0xea, 0x5d, 0x58,
	0x16, 0x8d, 0x2a, 0x15, 0x65, 0x6a, 0x2a, 0xca, 0x66, 0x06, 0x91, 0xa4, 0xfd, 0x01, 0x81, 0xb2,
	0x4f, 0x48, 0x67, 0x9c, 0x82, 0xb2, 0x01, 0x13, 0x2c, 0x04, 0x0a, 0xa3, 0x42, 0xe0, 0xa3, 0xb7,
	0x74, 0xc6, 0x89, 0x2f, 0xc6, 0x10, 0x30, 0x93, 0x7d, 0xf4, 0xd6, 0x00, 0xc3, 0x4e, 0x09, 0xa6,
	0x02, 0xc3, 0x3b, 0x20, 0x81, 0x36, 0x0f, 0xb3, 0x1c, 0x0c, 0x37, 0x5a, 0xe3, 0x7f, 0x8b, 0x00,
	0xa2, 0xed, 0xb6, 0x88, 0x87, 0x7f, 0x87, 0x00, 0x8b, 0xd4, 0x8c, 0xe3, 0x19, 0xd1, 0xf8, 0xd5,
	0x11, 0x74, 0x6d, 0xe3, 0xcb, 0x7f, 0xff, 0xe7, 0x9b, 0x42, 0x55, 0x7d, 0xbb, 0x7e, 0xb8, 0x59,
	0xff, 0x15, 0x4d, 0x81, 0x2d, 0x11, 0x0a, 0x7e, 0xbd, 0x5a, 0x4f, 0x4c, 0x0d, 0xf5, 0xea, 0xcb,
	0xdb, 0xa8, 0x8a, 0xff, 0x84, 0xd8, 0xb7, 0x7f, 0x02, 0x45, 0x25, 0x2b, 0x45, 0x3e, 0x12, 0x8e,
	0xc4, 0xf3, 0x1e, 0xc3, 0x53, 0xc7, 0x37, 0x19, 0x9e, 0xb8, 0xfc, 0x61, 0xb8, 0xf0, 0x5f, 0xa2,
	0xdf, 0x0c, 0x09, 0x5c, 0xef, 0x64, 0xa5, 0xe5, 0xce, 0x9a, 0x23, 0xa1, 0x6d, 0x31, 0x68, 0xdf,
	0x6f, 0x34, 0x32, 0xd0, 0x6a, 0xc7, 0xb1, 0xdb, 0xb7, 0x88, 0x7f, 0xee, 0x27, 0xe6, 0x3a, 0x2c,
	0xf9, 0xa2, 0xc9, 0x9b, 0x37, 0xd5, 0x77, 0x8e, 0xc5, 0xcb, 0xc3, 0x47, 0xab, 0x31, 0xb4, 0x15,
	0x7c, 0x8d, 0xa1, 0x15, 0xd8, 0x62, 0x18, 0x5f, 0x26, 0x41, 0xe2, 0x3f, 0xa2, 0xf0, 0x83, 0x76,
	0x94, 0x05, 0x73, 0x27, 0x42, 0xf5, 0x6c, 0x26, 0x1d, 0xee, 0xf7, 0xdc, 0xe0, 0x28, 0x74, 0x6a,
	0x75, 0x4c, 0xa7, 0xfe, 0x15, 0xc1, 0x99, 0xcc, 0x60, 0x23, 0xb3, 0x58, 0xde, 0xf4, 0x93, 0x0b,
	0xe8, 0x47, 0x0c, 0xd0, 0xae, 0xf6, 0xe1, 0x58, 0x80, 0x6e, 0xf7, 0xd2, 0x72, 0xa8, 0x5f, 0xbf,
	0x46, 0xa0, 0xc4, 0x66, 0x1e, 0xbc, 0x96, 0xc5, 0x97, 0x1d, 0x89, 0x72, 0x91, 0xed, 0x32, 0x64,
	0x77, 0xb5, 0x5b, 0xe3, 0x21, 0x33, 0x06, 0x12, 0x28, 0xa6, 0xdf, 0x22, 0x98, 0xa0, 0x73, 0x02,
	0xbe, 0x24, 0x9b, 0x95, 0xa3, 0x11, 0x4a, 0x16, 0xf2, 0xf1, 0xf1, 0x22, 0x0c, 0x79, 0xad, 0x31,
	0x1e, 0x1a, 0xb7, 0xdf, 0xed, 0x52, 0x18, 0x26, 0xcc, 0x25, 0xc6, 0x16, 0x2c, 0x6b, 0x7d, 0x92,
	0xd1, 0x4e, 0x5d, 0x1f, 0xc9, 0xc7, 0x01, 0x56, 0xd0, 0x06, 0xa2, 0xb9, 0xbf, 0x98, 0xfe, 0xc8,
	0xc0, 0xd7, 0xf3, 0xa2, 0x24, 0xf3, 0x21, 0x92, 0xeb, 0x8a, 0x87, 0x4c, 0xf9, 0x7b, 0xda, 0xdd,
	0x93, 0x04, 0xc9, 0x40, 0x0c, 0x35, 0xc4, 0x2b, 0x04, 0x73, 0x89, 0xd6, 0x28, 0xb3, 0x84, 0xac,
	0x53, 0xcb, 0x2c, 0x21, 0xed, 0xb1, 0x5a, 0x95, 0xa1, 0x5d, 0xc3, 0x5a, 0x7e, 0xbe, 0x47, 0xc2,
	0xbf, 0x42, 0x30, 0x9f, 0x1c, 0xf3, 0xb0, 0x44, 0x8e, 0x74, 0x10, 0x54, 0x87, 0x34, 0x6e, 0xed,
	0x06, 0xc3, 0x70, 0x4d, 0x5d, 0x95, 0x37, 0x93, 0x50, 0xbe, 0x28, 0x88, 0xaf, 0x10, 0xcc, 0x27,
	0x47, 0x43, 0x19, 0x0a, 0xe9, 0xf0, 0x38, 0x14, 0x85, 0xa8, 0x36, 0x8d, 0x2a, 0xf7, 0x5b, 0x38,
	0x5a, 0x8d, 0x82, 0xf3, 0x05, 0x82, 0xf9, 0xe4, 0x0c, 0x21, 0x83, 0x23, 0x9d, 0x32, 0x72, 0x43,
	0xe8, 0x26, 0x83, 0xb2, 0x5e, 0x7d, 0x3b, 0x01, 0x25, 0x0f, 0x05, 0x4b, 0x5b, 0x3a, 0x03, 0xc8,
	0xd2, 0x36, 0x36, 0xa8, 0x48, 0x3b, 0x55, 0x6c, 0x74, 0x38, 0x69, 0xda, 0xfa, 0x84, 0x74, 0x6e,
	0xa3, 0x6a, 0xe3, 0xcf, 0xd3, 0x30, 0x23, 0x7e, 0x66, 0x13, 0x0f, 0x7f, 0x0a, 0x0a, 0x8f, 0x04,
	0x7e, 0x33, 0x93, 0xf7, 0x8f, 0x58, 0xcd, 0x23, 0x68, 0xd7, 0x19, 0x9a, 0xab, 0xea, 0x65, 0x69,
	0x54, 0xf0, 0x3f, 0xcb, 0xc2, 0x07, 0x2f, 0x41, 0x89, 0x5d, 0x16, 0xc8, 0x4a, 0x69, 0xf6, 0x2e,
	0x21, 0x5f, 0x70, 0x9d, 0x09, 0xbe, 0xde, 0x58, 0x63, 0x82, 0x99, 0xa0, 0xda, 0x50, 0xf1, 0x5f,
	0x22, 0x98, 0x16, 0x8a, 0xe3, 0x15, 0xe9, 0xff, 0xaf, 0xd8, 0x2d, 0x82, 0xba, 0x3a, 0x84, 0x43,
	0x38, 0xa2, 0xc1, 0x10, 0xdc, 0xd0, 0xd6, 0x07, 0x08, 0xe4, 0xc2, 0xc5, 0xd5, 0x0c, 0x05, 0xe1,
	0x40, 0x29, 0xbc, 0x5a, 0xc1, 0xab, 0xd2, 0xb9, 0xea, 0x78, 0xda, 0xaf, 0x33, 0xd9, 0xab, 0xf8,
	0xca, 0x08, 0xd9, 0x34, 0xf0, 0x61, 0x70, 0x39, 0x80, 0xaf, 0xca, 0x2b, 0x4e, 0xe2, 0x96, 0x42,
	0x5d, 0x1b, 0xce, 0x24, 0xd4, 0x4f, 0x42, 0x90, 0xd5, 0x24, 0x71, 0xaf, 0xf0, 0x77, 0x04, 0x67,
	0xe5, 0x7f, 0xef, 0x71, 0x7d, 0x88, 0x24, 0xe9, 0x94, 0xb4, 0x71, 0xfc, 0x0d, 0x02, 0x66, 0x72,
	0xe6, 0xcc, 0xb7, 0x54, 0x6a, 0x62, 0x0a, 0x40, 0x89, 0xdd, 0x00, 0xc8, 0x82, 0x35, 0x7b, 0x41,
	0x90, 0x5b, 0x29, 0x84, 0xa9, 0xaa, 0xa3, 0xbc, 0xb5, 0xf3, 0x73, 0x58, 0x6a, 0x3b, 0xbd, 0x8c,
	0xac, 0x1d, 0x85, 0xff, 0x9d, 0xdd, 0xa3, 0xc7, 0xee, 0xa1, 0xff, 0x23, 0xf4, 0xb7, 0xc2, 0xd9,
	0x07, 0x9c, 0xe9, 0x5e, 0xd7, 0xe9, 0x9b, 0x34, 0x36, 0xf7, 0xfb, 0xad, 0xda, 0x27, 0x9b, 0xff,
	0x0a, 0x09, 0x4f, 0x19, 0xe1, 0x29, 0x27, 0x3c, 0xfd, 0x64, 0xb3, 0x35, 0xc5, 0x40, 0xbd, 0xfb,
	0x5d, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x51, 0x58, 0xde, 0x57, 0x1e, 0x00, 0x00,
}
